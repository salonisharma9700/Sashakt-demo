[{"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\index.js":"1","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\App.js":"2","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\reportWebVitals.js":"3","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Ag1.js":"4","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Sidebar.js":"5","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\Hgame.js":"6","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\WatchVid.js":"7","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\wackAmole\\WaGa.js":"8","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\cgam.js":"9","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL1.js":"10","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL3.js":"11","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL2.js":"12","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL4.js":"13","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz2.js":"14","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video4W.js":"15","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz4.js":"16","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video3W.js":"17","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video1W.js":"18","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz1.js":"19","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz3.js":"20","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video2W.js":"21","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\MessageParser.js":"22","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\ActionProvider.js":"23","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\config.js":"24","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\GridViewAg1.js":"25","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\ScoreBoard.js":"26","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL1.js":"27","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL3.js":"28","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL4.js":"29","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL2.js":"30","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\Avatar.js":"31","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\StartBtn.js":"32","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\DipslayImage.js":"33","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\StartSlow.js":"34","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\data.js":"35","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\VideoW.js":"36","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Sashakt.js":"37","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Chatbot.js":"38","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\MyNav.js":"39","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\gbot.js":"40","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Home.js":"41","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\AboutUs.js":"42","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\Cgamquiz.js":"43","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\EduCards.js":"44","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTDevelopment.js":"45","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTDiscrimination.js":"46","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTEducation.js":"47","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTParticipation.js":"48","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTProtection.js":"49","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTSurvival.js":"50","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2home.js":"51","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\Memory.js":"52","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\WordGames.js":"53","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\EduMcq.js":"54","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\DevMcq.js":"55","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\ProMcq.js":"56","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\ParMcq.js":"57","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\DisMcq.js":"58","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\SurMcq.js":"59","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video1.js":"60","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video2.js":"61","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video3.js":"62","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\VidAg2.js":"63","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent1.js":"64","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent2.js":"65","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent3.js":"66","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\GameBoard.js":"67","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\JumbledSentenceGame.js":"68","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\WordSearchGame.js":"69","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\WordJumble.js":"70","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Prents.js":"71"},{"size":505,"mtime":1703738696417,"results":"72","hashOfConfig":"73"},{"size":6349,"mtime":1706648689671,"results":"74","hashOfConfig":"73"},{"size":362,"mtime":1698556039992,"results":"75","hashOfConfig":"73"},{"size":4565,"mtime":1705481704567,"results":"76","hashOfConfig":"73"},{"size":789,"mtime":1705660291040,"results":"77","hashOfConfig":"73"},{"size":2621,"mtime":1706595274758,"results":"78","hashOfConfig":"73"},{"size":319,"mtime":1705841122677,"results":"79","hashOfConfig":"73"},{"size":8812,"mtime":1706453300038,"results":"80","hashOfConfig":"73"},{"size":31021,"mtime":1706028497124,"results":"81","hashOfConfig":"73"},{"size":7742,"mtime":1706337554010,"results":"82","hashOfConfig":"73"},{"size":8528,"mtime":1706337746803,"results":"83","hashOfConfig":"73"},{"size":7797,"mtime":1706337701041,"results":"84","hashOfConfig":"73"},{"size":8559,"mtime":1706337811311,"results":"85","hashOfConfig":"73"},{"size":4050,"mtime":1706632576171,"results":"86","hashOfConfig":"73"},{"size":2757,"mtime":1706510613683,"results":"87","hashOfConfig":"73"},{"size":4153,"mtime":1706640106498,"results":"88","hashOfConfig":"73"},{"size":2002,"mtime":1706510517596,"results":"89","hashOfConfig":"73"},{"size":3124,"mtime":1706596807436,"results":"90","hashOfConfig":"73"},{"size":3991,"mtime":1706631223992,"results":"91","hashOfConfig":"73"},{"size":4131,"mtime":1706639111530,"results":"92","hashOfConfig":"73"},{"size":1814,"mtime":1706510425403,"results":"93","hashOfConfig":"73"},{"size":1038,"mtime":1698595024873,"results":"94","hashOfConfig":"73"},{"size":1538,"mtime":1706650038190,"results":"95","hashOfConfig":"73"},{"size":1206,"mtime":1706604245365,"results":"96","hashOfConfig":"73"},{"size":202,"mtime":1699727654841,"results":"97","hashOfConfig":"73"},{"size":198,"mtime":1703702119708,"results":"98","hashOfConfig":"73"},{"size":2911,"mtime":1704883581743,"results":"99","hashOfConfig":"73"},{"size":2726,"mtime":1704868888715,"results":"100","hashOfConfig":"73"},{"size":2990,"mtime":1704868888741,"results":"101","hashOfConfig":"73"},{"size":2839,"mtime":1704868888670,"results":"102","hashOfConfig":"73"},{"size":126,"mtime":1698656708730,"results":"103","hashOfConfig":"73"},{"size":302,"mtime":1698556040324,"results":"104","hashOfConfig":"73"},{"size":427,"mtime":1706682700909,"results":"105","hashOfConfig":"73"},{"size":674,"mtime":1698593356136,"results":"106","hashOfConfig":"73"},{"size":1117,"mtime":1698595408092,"results":"107","hashOfConfig":"73"},{"size":6230,"mtime":1705851495532,"results":"108","hashOfConfig":"73"},{"size":677,"mtime":1704794508537,"results":"109","hashOfConfig":"73"},{"size":558,"mtime":1698833922792,"results":"110","hashOfConfig":"73"},{"size":590,"mtime":1706258693957,"results":"111","hashOfConfig":"73"},{"size":892,"mtime":1706599165173,"results":"112","hashOfConfig":"73"},{"size":10831,"mtime":1706460017406,"results":"113","hashOfConfig":"73"},{"size":2770,"mtime":1706291414751,"results":"114","hashOfConfig":"73"},{"size":8936,"mtime":1706030773377,"results":"115","hashOfConfig":"73"},{"size":2739,"mtime":1706177471066,"results":"116","hashOfConfig":"73"},{"size":1070,"mtime":1706200791885,"results":"117","hashOfConfig":"73"},{"size":1007,"mtime":1706200772311,"results":"118","hashOfConfig":"73"},{"size":873,"mtime":1706255263525,"results":"119","hashOfConfig":"73"},{"size":1068,"mtime":1706202638763,"results":"120","hashOfConfig":"73"},{"size":1022,"mtime":1706202646734,"results":"121","hashOfConfig":"73"},{"size":1015,"mtime":1706200728133,"results":"122","hashOfConfig":"73"},{"size":3802,"mtime":1706205935564,"results":"123","hashOfConfig":"73"},{"size":1139,"mtime":1706205394127,"results":"124","hashOfConfig":"73"},{"size":2374,"mtime":1706204816904,"results":"125","hashOfConfig":"73"},{"size":4090,"mtime":1706200033853,"results":"126","hashOfConfig":"73"},{"size":4148,"mtime":1706201823807,"results":"127","hashOfConfig":"73"},{"size":4270,"mtime":1706201623377,"results":"128","hashOfConfig":"73"},{"size":4346,"mtime":1706201787855,"results":"129","hashOfConfig":"73"},{"size":4298,"mtime":1706201812310,"results":"130","hashOfConfig":"73"},{"size":4310,"mtime":1706201533224,"results":"131","hashOfConfig":"73"},{"size":2463,"mtime":1706510842591,"results":"132","hashOfConfig":"73"},{"size":2468,"mtime":1706510988747,"results":"133","hashOfConfig":"73"},{"size":2468,"mtime":1706511061212,"results":"134","hashOfConfig":"73"},{"size":2362,"mtime":1706208132133,"results":"135","hashOfConfig":"73"},{"size":4252,"mtime":1706630870279,"results":"136","hashOfConfig":"73"},{"size":4546,"mtime":1706246132060,"results":"137","hashOfConfig":"73"},{"size":3868,"mtime":1706246149731,"results":"138","hashOfConfig":"73"},{"size":4399,"mtime":1706248575769,"results":"139","hashOfConfig":"73"},{"size":3485,"mtime":1706337138122,"results":"140","hashOfConfig":"73"},{"size":4097,"mtime":1706337345873,"results":"141","hashOfConfig":"73"},{"size":3457,"mtime":1706337207980,"results":"142","hashOfConfig":"73"},{"size":6097,"mtime":1706630641641,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"1hwpjzq",{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"146"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"146"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"146"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"146"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"146"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"146"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"146"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"146"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"146"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"146"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"146"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"146"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\index.js",[],["301","302"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\App.js",["303","304"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\reportWebVitals.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Ag1.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Sidebar.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\Hgame.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\WatchVid.js",["305"],"import React, { useState } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nconst  Watchvid = () => {\r\n    return (\r\n        <div className='video-watch'>\r\n            <h1 className='watch-1'>hello</h1>\r\n            <Link to=\"/watchVideo1\" ></Link>\r\n\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default Watchvid;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\wackAmole\\WaGa.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\cgam.js",["306","307","308","309","310"],"// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard'\r\n// import blueCandy from './cgamimg/blueCandy.png'\r\n// import greenCandy from './cgamimg/greenCandy.png'\r\n// import orangeCandy from './cgamimg/orangeCandy.png'\r\n// import purpleCandy from './cgamimg/purpleCandy.png'\r\n// import redCandy from './cgamimg/redCandy.png'\r\n// import yellowCandy from './cgamimg/yellowCandy.png'\r\n// import blank from './cgamimg/blank.png'\r\n// import \"./cgam.css\"\r\n// const PopUp = ({ message, onClose }) => (\r\n//     <div className=\"popup\">\r\n//       <div className=\"popup-content\">\r\n//         <p>{message}</p>\r\n        \r\n//         <button onClick={onClose}>Close</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [level, setLevel] = useState(1);\r\n//   const [popUpMessage, setPopUpMessage] = useState(\"\");\r\n// //   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [showLevelUp, setShowLevelUp] = useState(false);\r\n//   const [showQuiz, setShowQuiz] = useState(false);\r\n//   const [quizQuestions, setQuizQuestions] = useState([\r\n//     // Add your quiz questions here\r\n//   ]);\r\n//   const [currentQuestions, setCurrentQuestions] = useState([]);\r\n//   const [quizCompleted, setQuizCompleted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n  // const checkForRowOfThree = () => {\r\n  //   for (let i = 0; i < 64; i++) {\r\n  //     const rowOfThree = [i, i + 1, i + 2];\r\n  //     const decidedColor = currentColorArrangement[i];\r\n  //     const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n  //     const isBlank = currentColorArrangement[i] === blank;\r\n\r\n  //     if (notValid.includes(i)) continue;\r\n\r\n  //     if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n  //       if (gameStarted) {\r\n  //         setScoreDisplay((score) => score + 1);\r\n  //         rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n  //         return true;\r\n  //       }\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n\r\n//       if ((scoreDisplay + 1) % 5 === 0 && !quizCompleted) {\r\n//         setLevel((prevLevel) => prevLevel + 1);\r\n//         setQuizCompleted(false);\r\n\r\n//         if (quizQuestions.length > 0) {\r\n//           const shuffledQuestions = shuffleArray(quizQuestions);\r\n//           const questionsForLevel = shuffledQuestions.splice(0, 2);\r\n//           setCurrentQuestions(questionsForLevel);\r\n//           setShowLevelUp(true);\r\n//           setShowQuiz(true);\r\n//         }\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//     gameStarted,\r\n//     scoreDisplay,\r\n//     quizCompleted,\r\n//     quizQuestions,\r\n//   ]);\r\n\r\n//   const startQuiz = () => {\r\n//     setShowQuiz(true);\r\n//   };\r\n\r\n//   const closeLevelUp = () => {\r\n//     const selectedAnswers = Array.from(document.querySelectorAll('input[type=\"radio\"]:checked')).map((input) => input.value);\r\n\r\n//     if (selectedAnswers.length === currentQuestions.length) {\r\n//       const allCorrect = currentQuestions.every((question, index) => question.correctAnswer === selectedAnswers[index]);\r\n\r\n//       if (allCorrect) {\r\n//         // Show badge or other level-up rewards\r\n//         setPopUpMessage(\"Congratulations! You cleared a Level!\");\r\n//         setShowPopUp(true);\r\n//       } else {\r\n//         setPopUpMessage(\"Oops! Some answers are incorrect. Please try again or rewatch videos and attempt again.\");\r\n//         setShowPopUp(true);\r\n//         setQuizCompleted(false);\r\n//         setQuizQuestions([]);\r\n//         return;\r\n//       }\r\n//     } else {\r\n//       setPopUpMessage(\"Please answer all questions before submitting.\");\r\n//       setShowPopUp(true);\r\n//       return;\r\n//     }\r\n\r\n//     setShowLevelUp(false);\r\n//     setShowQuiz(false);\r\n//   };\r\n\r\n//   const handleAnswer = (questionIndex, selectedOption) => {\r\n//     const currentQuestion = currentQuestions[questionIndex];\r\n\r\n//     if (selectedOption === currentQuestion.correctAnswer) {\r\n//       console.log(\"Correct!\");\r\n//     } else {\r\n//       console.log(\"Incorrect!\");\r\n//     }\r\n\r\n//     const allCorrect = currentQuestions.every((question) => question.correctAnswer === selectedOption);\r\n\r\n//     setQuizCompleted(allCorrect);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     for (let i = array.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [array[i], array[j]] = [array[j], array[i]];\r\n//     }\r\n//     return array;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n\r\n//       {showLevelUp && (\r\n//         <div className=\"level-up-popup\">\r\n//           {/* Add level-up popup content here */}\r\n//           <button onClick={startQuiz}>Start Quiz</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showQuiz && (\r\n//         <div className=\"quiz-popup\">\r\n//           {/* Add quiz content here */}\r\n//           {currentQuestions.map((question, index) => (\r\n//             <div key={index}>\r\n//               <p>{question.question}</p>\r\n//               {question.options.map((option, optionIndex) => (\r\n//                 <div key={optionIndex}>\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question_${index}`}\r\n//                     value={option}\r\n//                     onChange={() => handleAnswer(index, option)}\r\n//                   />\r\n//                   <label>{option}</label>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ))}\r\n//           <button onClick={closeLevelUp}>Submit Answers</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"popup\">\r\n//         {showPopUp && <PopUp message={popUpMessage} onClose={() => setShowPopUp(false)} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard';\r\n// import blueCandy from './cgamimg/blueCandy.png';\r\n// import greenCandy from './cgamimg/greenCandy.png';\r\n// import orangeCandy from './cgamimg/orangeCandy.png';\r\n// import purpleCandy from './cgamimg/purpleCandy.png';\r\n// import redCandy from './cgamimg/redCandy.png';\r\n// import yellowCandy from './cgamimg/yellowCandy.png';\r\n// import blank from './cgamimg/blank.png';\r\n// import './cgam.css';\r\n\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfThree = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfThree = [i, i + 1, i + 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//   ]);\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport ScoreBoard from './ScoreBoard';\r\nimport blueCandy from './cgamimg/blueCandy.png';\r\nimport greenCandy from './cgamimg/greenCandy.png';\r\nimport orangeCandy from './cgamimg/orangeCandy.png';\r\nimport purpleCandy from './cgamimg/purpleCandy.png';\r\nimport redCandy from './cgamimg/redCandy.png';\r\nimport yellowCandy from './cgamimg/yellowCandy.png';\r\nimport blank from './cgamimg/blank.png';\r\nimport './cgam.css';\r\n\r\nconst width = 8\r\nconst candyColors = [\r\n    blueCandy,\r\n    orangeCandy,\r\n    purpleCandy,\r\n    redCandy,\r\n    yellowCandy,\r\n    greenCandy\r\n]\r\nconst CgQuiz = () => {\r\n  window.location.href = '/Cgquiz';\r\n};\r\n\r\nconst Gameapp = () => {\r\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\r\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\r\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\r\n    const [scoreDisplay, setScoreDisplay] = useState(0)\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n\r\n    const checkForColumnOfFour = () => {\r\n        for (let i = 0; i <= 39; i++) {\r\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfFour = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForColumnOfThree = () => {\r\n        for (let i = 0; i <= 47; i++) {\r\n            const columnOfThree = [i, i + width, i + width * 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              } \r\n              return false;\r\n              \r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfThree = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfThree = [i, i + 1, i + 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const moveIntoSquareBelow = () => {\r\n        for (let i = 0; i <= 55; i++) {\r\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\r\n            const isFirstRow = firstRow.includes(i)\r\n\r\n            if (isFirstRow && currentColorArrangement[i] === blank) {\r\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\r\n                currentColorArrangement[i] = candyColors[randomNumber]\r\n            }\r\n\r\n            if ((currentColorArrangement[i + width]) === blank) {\r\n                currentColorArrangement[i + width] = currentColorArrangement[i]\r\n                currentColorArrangement[i] = blank\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragStart = (e) => {\r\n        setGameStarted(true);\r\n        setSquareBeingDragged(e.target)\r\n    }\r\n    const dragDrop = (e) => {\r\n        setSquareBeingReplaced(e.target)\r\n    }\r\n    // const dragEnd = () => {\r\n    //     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\r\n    //     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\r\n\r\n    //     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\r\n    //     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\r\n\r\n    //     const validMoves = [\r\n    //         squareBeingDraggedId - 1,\r\n    //         squareBeingDraggedId - width,\r\n    //         squareBeingDraggedId + 1,\r\n    //         squareBeingDraggedId + width\r\n    //     ]\r\n\r\n    //     const validMove = validMoves.includes(squareBeingReplacedId)\r\n    //     if (gameStarted) {\r\n    //       const isAColumnOfFour = checkForColumnOfFour();\r\n    //       const isARowOfFour = checkForRowOfFour();\r\n    //       const isAColumnOfThree = checkForColumnOfThree();\r\n    //       const isARowOfThree = checkForRowOfThree();\r\n    \r\n    //       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n    //         setSquareBeingDragged(null);\r\n    //         setSquareBeingReplaced(null);\r\n    //       } else {\r\n    //         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n    //         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n    //         setCurrentColorArrangement([...currentColorArrangement]);\r\n    //       }\r\n    //     }\r\n    //   };\r\n    \r\n    const dragEnd = () => {\r\n      const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n      const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n  \r\n      const validMoves = [\r\n          squareBeingDraggedId - 1,\r\n          squareBeingDraggedId - width,\r\n          squareBeingDraggedId + 1,\r\n          squareBeingDraggedId + width\r\n      ];\r\n  \r\n      const validMove = validMoves.includes(squareBeingReplacedId);\r\n  \r\n      if (gameStarted && squareBeingReplacedId && validMove) {\r\n          currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n          currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n  \r\n          const isAColumnOfFour = checkForColumnOfFour();\r\n          const isARowOfFour = checkForRowOfFour();\r\n          const isAColumnOfThree = checkForColumnOfThree();\r\n          const isARowOfThree = checkForRowOfThree();\r\n  \r\n          if (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree) {\r\n              setScoreDisplay(prevScore => prevScore + 2);\r\n          } else {\r\n              setScoreDisplay(prevScore => prevScore + 1); // Increment score for a valid move without a match\r\n          }\r\n  \r\n          setSquareBeingDragged(null);\r\n          setSquareBeingReplaced(null);\r\n          setCurrentColorArrangement([...currentColorArrangement]);\r\n      } else {\r\n          setCurrentColorArrangement(prevArrangement => [...prevArrangement]); // Revert the changes\r\n      }\r\n  };\r\n  \r\n    const createBoard = () => {\r\n        const randomColorArrangement = []\r\n        for (let i = 0; i < width * width; i++) {\r\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\r\n            randomColorArrangement.push(randomColor)\r\n        }\r\n        setCurrentColorArrangement(randomColorArrangement);\r\n    };\r\n\r\n    useEffect(() => {\r\n        createBoard()\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         checkForColumnOfFour()\r\n    //         checkForRowOfFour()\r\n    //         checkForColumnOfThree()\r\n    //         checkForRowOfThree()\r\n    //         moveIntoSquareBelow()\r\n    //         setCurrentColorArrangement([...currentColorArrangement])\r\n    //     }, 100)\r\n    //     return () => clearInterval(timer)\r\n    // }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\r\n\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n          checkForColumnOfFour();\r\n          checkForRowOfFour();\r\n          checkForColumnOfThree();\r\n          checkForRowOfThree();\r\n          moveIntoSquareBelow();\r\n          setCurrentColorArrangement((prevArrangement) => [...prevArrangement]);\r\n      }, 100);\r\n      return () => clearInterval(timer);\r\n  }, [\r\n      checkForColumnOfFour,\r\n      checkForRowOfFour,\r\n      checkForColumnOfThree,\r\n      checkForRowOfThree,\r\n      moveIntoSquareBelow,\r\n      setCurrentColorArrangement,\r\n  ]);\r\n  \r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"game\">\r\n                {currentColorArrangement.map((candyColor, index) => (\r\n                    <img\r\n                        key={index}\r\n                        src={candyColor}\r\n                        alt={candyColor}\r\n                        data-id={index}\r\n                        draggable={true}\r\n                        onDragStart={dragStart}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                        onDragEnter={(e) => e.preventDefault()}\r\n                        onDragLeave={(e) => e.preventDefault()}\r\n                        onDrop={dragDrop}\r\n                        onDragEnd={dragEnd}\r\n                    />\r\n                ))}\r\n            </div>\r\n           <div className='sb'>\r\n            <ScoreBoard score={scoreDisplay}/>\r\n           </div>\r\n           <div className='cgam-quiz'>\r\n            <button className='cgam-quiz' onClick={CgQuiz} >Take Quiz</button>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gameapp;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL1.js",["311","312"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./GL1.css\";\r\nimport Quiz from \"./QL1\";\r\nconst SlidePuzzle = () => {\r\n  const initialImages = [\r\n    { id: 1, src: \"/puzzleimg/level1/00.jpg\", alt: \"Image 1\" },\r\n    { id: 2, src: \"/puzzleimg/level1/01.jpg\", alt: \"Image 2\" },\r\n    { id: 3, src: \"/puzzleimg/level1/02.jpg\", alt: \"Image 3\" },\r\n    { id: 4, src: \"/puzzleimg/level1/10.jpg\", alt: \"Image 4\" },\r\n    { id: 5, src: \"/puzzleimg/level1/11.jpg\", alt: \"Image 5\" },\r\n    { id: 6, src: \"/puzzleimg/level1/12.jpg\", alt: \"Image 6\" },\r\n    { id: 7, src: \"/puzzleimg/level1/20.jpg\", alt: \"Image 7\" },\r\n    { id: 8, src: \"/puzzleimg/level1/21.jpg\", alt: \"Image 8\" },\r\n    { id: 9, src: \"/puzzleimg/level1/22.jpg\", alt: \"Image 9\" },\r\n  ];\r\n\r\n  const shuffleOrder = (array) => {\r\n    let shuffledOrder = [...Array(array.length).keys()];\r\n    for (let i = shuffledOrder.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledOrder[i], shuffledOrder[j]] = [\r\n        shuffledOrder[j],\r\n        shuffledOrder[i],\r\n      ];\r\n    }\r\n    return shuffledOrder;\r\n  };\r\n\r\n  const shuffledOrder = shuffleOrder(initialImages);\r\n\r\n  const correctOrder = [1, 2, 3, 4, 5, 6, 7, 8];\r\n  const authToken = localStorage.getItem('token');\r\n  const [images, setImages] = useState(initialImages);\r\n  const [droppedImages, setDroppedImages] = useState([]);\r\n  const [showCongrats, setShowCongrats] = useState(false);\r\n  const [undoDisabled, setUndoDisabled] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [showQuizDiv, setShowQuizDiv] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [QuizButtonVisible, setQuizButtonVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setImages((prevImages) =>\r\n      shuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  }, []);\r\n\r\n  const handleDragStart = (e, id) => {\r\n    e.dataTransfer.setData(\"text/plain\", id.toString());\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n\r\n    const draggedImageId = e.dataTransfer.getData(\"text/plain\");\r\n    const draggedImage = images.find(\r\n      (img) => img.id.toString() === draggedImageId\r\n    );\r\n\r\n    if (draggedImage) {\r\n      setDroppedImages((prevDroppedImages) => [\r\n        ...prevDroppedImages,\r\n        draggedImage,\r\n      ]);\r\n      setImages((prevImages) =>\r\n        prevImages.filter((img) => img.id !== draggedImage.id)\r\n      );\r\n    }\r\n\r\n    if (images.length === 1) {\r\n      const droppedIds = droppedImages.map((img) => img.id);\r\n      const isCorrectOrder =\r\n        JSON.stringify(droppedIds) === JSON.stringify(correctOrder);\r\n\r\n      setShowCongrats(isCorrectOrder);\r\n      setUndoDisabled(isCorrectOrder);\r\n    }\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    const lastDroppedImage = droppedImages[droppedImages.length - 1];\r\n    if (lastDroppedImage) {\r\n      setImages((prevImages) => [...prevImages, lastDroppedImage]);\r\n      setDroppedImages((prevDroppedImages) => prevDroppedImages.slice(0, -1));\r\n      setShowCongrats(false);\r\n      setUndoDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    setPreviewImage(\"/puzzleimg/level1/edu.jpg\");\r\n  };\r\n\r\n   \r\n  const handleNext = async () => {\r\n    try {\r\n      // Make a POST request to save game progress\r\n      await axios.post('http://localhost:5000/api/game/level', {level:1,  isCompleted:true},{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n\r\n      console.log('Game progress saved successfully');\r\n      \r\n      setShowQuizDiv(true);\r\n      setQuizStarted(true);\r\n      setQuizButtonVisible(false);\r\n      setShowCongrats(false);\r\n      setDroppedImages([]);\r\n      setImages([]);\r\n      setPreviewImage(null);\r\n    } catch (error) {\r\n      console.error('Error saving game progress:', error);\r\n    }\r\n  };\r\n\r\n  // const handleNext = () => {\r\n  //   setShowQuizDiv(true);\r\n  //   setQuizStarted(true);\r\n  //   setQuizButtonVisible(false);\r\n  //   setShowCongrats(false);\r\n  //   setDroppedImages([]);\r\n  //   setImages([]);\r\n  //   setPreviewImage(null);\r\n  // };\r\n\r\n  const handleQuizCompletion = () => {\r\n    setShowQuizDiv(false);\r\n    setQuizStarted(false);\r\n  };\r\n  const restartPuzzle = () => {\r\n    setImages(initialImages);\r\n    setDroppedImages([]);\r\n    setShowCongrats(false);\r\n    setUndoDisabled(false);\r\n\r\n    const newShuffledOrder = shuffleOrder(initialImages);\r\n    setImages((prevImages) =>\r\n      newShuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className={`slidegame ${showCongrats ? 'congrats-background' : ''}`}>\r\n      {showCongrats ? (\r\n        <div className=\"congrats-container\">\r\n          <h1 className=\"congrats-message visible\">\r\n            Right to free and compulsory elementary education for all children\r\n            in the 6-14 year age group\r\n          </h1>\r\n          <div className=\"buttons\">\r\n            <button className=\"restart-button\" onClick={restartPuzzle}>\r\n              Restart\r\n            </button>\r\n            <button className=\"next-button\" onClick={handleNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"pre-img\">\r\n            <img src=\"/puzzleimg/level1/edu.jpg\" alt=\"preview pic\" />\r\n          </div>\r\n          <div\r\n            className=\"drop-zone\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n          >\r\n            {showQuizDiv && quizStarted ? (\r\n              <Quiz onComplete={handleQuizCompletion} />\r\n            ) : (\r\n              <>\r\n                {droppedImages.map((img) => (\r\n                  <img\r\n                    key={img.id}\r\n                    src={img.src}\r\n                    alt={img.alt}\r\n                    className={showCongrats ? \"fade-out\" : \"\"}\r\n                  />\r\n                ))}\r\n                {previewImage && isHovered && (\r\n                  <img\r\n                    src={previewImage}\r\n                    alt=\"Preview\"\r\n                    style={{\r\n                      width: isHovered ? \"595px\" : \"auto\",\r\n                      height: isHovered ? \"595px\" : \"auto\",\r\n                      position: \"absolute\",\r\n                      top: \"50%\",\r\n                      left: \"50%\",\r\n                      transform: \"translate(-50%, -50%)\",\r\n                      zIndex: 1,\r\n                    }}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"image-list\">\r\n            {images.map((img) => (\r\n              <img\r\n                key={img.id}\r\n                src={img.src}\r\n                alt={img.alt}\r\n                draggable\r\n                onDragStart={(e) => handleDragStart(e, img.id)}\r\n              />\r\n            ))}\r\n          </div>\r\n          <button\r\n            className=\"preview-button\"\r\n            onClick={handlePreview}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n            disabled={showCongrats || quizStarted}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Preview\r\n          </button>\r\n          <button\r\n            className=\"undo-button\"\r\n            onClick={handleUndo}\r\n            disabled={undoDisabled}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Undo\r\n          </button>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default SlidePuzzle;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL3.js",["313","314"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./GL1.css\";\r\nimport Quiz2 from \"./QL3\";\r\nimport axios from \"axios\";\r\nconst SlidePuzzle2 = () => {\r\n  const initialImages = [\r\n    { id: 1, src: \"/puzzleimg/level3/00.jpg\", alt: \"Image 1\" },\r\n    { id: 2, src: \"/puzzleimg/level3/10.jpg\", alt: \"Image 2\" },\r\n    { id: 3, src: \"/puzzleimg/level3/20.jpg\", alt: \"Image 3\" },\r\n    { id: 4, src: \"/puzzleimg/level3/30.jpg\", alt: \"Image 4\" },\r\n    { id: 5, src: \"/puzzleimg/level3/01.jpg\", alt: \"Image 5\" },\r\n    { id: 6, src: \"/puzzleimg/level3/11.jpg\", alt: \"Image 6\" },\r\n    { id: 7, src: \"/puzzleimg/level3/21.jpg\", alt: \"Image 7\" },\r\n    { id: 8, src: \"/puzzleimg/level3/31.jpg\", alt: \"Image 8\" },\r\n    { id: 9, src: \"/puzzleimg/level3/02.jpg\", alt: \"Image 9\" },\r\n    { id: 10, src: \"/puzzleimg/level3/12.jpg\", alt: \"Image 10\" },\r\n    { id: 11, src: \"/puzzleimg/level3/22.jpg\", alt: \"Image 11\" },\r\n    { id: 12, src: \"/puzzleimg/level3/32.jpg\", alt: \"Image 12\" },\r\n    { id: 13, src: \"/puzzleimg/level3/03.jpg\", alt: \"Image 13\" },\r\n    { id: 14, src: \"/puzzleimg/level3/13.jpg\", alt: \"Image 14\" },\r\n    { id: 15, src: \"/puzzleimg/level3/23.jpg\", alt: \"Image 15\" },\r\n    { id: 16, src: \"/puzzleimg/level3/33.jpg\", alt: \"Image 16\" },\r\n  ];\r\n\r\n  const shuffleOrder = (array) => {\r\n    let shuffledOrder = [...Array(array.length).keys()];\r\n    for (let i = shuffledOrder.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledOrder[i], shuffledOrder[j]] = [\r\n        shuffledOrder[j],\r\n        shuffledOrder[i],\r\n      ];\r\n    }\r\n    return shuffledOrder;\r\n  };\r\n\r\n  const shuffledOrder = shuffleOrder(initialImages);\r\n\r\n  const correctOrder = [1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12,13,14,15];\r\n\r\n  const [images, setImages] = useState(initialImages);\r\n  const [droppedImages, setDroppedImages] = useState([]);\r\n  const [showCongrats, setShowCongrats] = useState(false);\r\n  const [undoDisabled, setUndoDisabled] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [showQuizDiv, setShowQuizDiv] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [QuizButtonVisible, setQuizButtonVisible] = useState(true);\r\n  const authToken = localStorage.getItem('token');\r\n\r\n\r\n  useEffect(() => {\r\n    setImages((prevImages) =>\r\n      shuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  }, []);\r\n\r\n  const handleDragStart = (e, id) => {\r\n    e.dataTransfer.setData(\"text/plain\", id.toString());\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n\r\n    const draggedImageId = e.dataTransfer.getData(\"text/plain\");\r\n    const draggedImage = images.find(\r\n      (img) => img.id.toString() === draggedImageId\r\n    );\r\n\r\n    if (draggedImage) {\r\n      setDroppedImages((prevDroppedImages) => [\r\n        ...prevDroppedImages,\r\n        draggedImage,\r\n      ]);\r\n      setImages((prevImages) =>\r\n        prevImages.filter((img) => img.id !== draggedImage.id)\r\n      );\r\n    }\r\n\r\n    if (images.length === 1) {\r\n      const droppedIds = droppedImages.map((img) => img.id);\r\n      const isCorrectOrder =\r\n        JSON.stringify(droppedIds) === JSON.stringify(correctOrder);\r\n\r\n      setShowCongrats(isCorrectOrder);\r\n      setUndoDisabled(isCorrectOrder);\r\n    }\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    const lastDroppedImage = droppedImages[droppedImages.length - 1];\r\n    if (lastDroppedImage) {\r\n      setImages((prevImages) => [...prevImages, lastDroppedImage]);\r\n      setDroppedImages((prevDroppedImages) => prevDroppedImages.slice(0, -1));\r\n      setShowCongrats(false);\r\n      setUndoDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    setPreviewImage(\"/puzzleimg/level3/abu.jpg\");\r\n  };\r\n\r\n  // const handleNext = () => {\r\n  //   setShowQuizDiv(true);\r\n  //   setQuizStarted(true);\r\n  //   setQuizButtonVisible(false);\r\n  //   setShowCongrats(false);\r\n  //   setDroppedImages([]);\r\n  //   setImages([]);\r\n  //   setPreviewImage(null);\r\n  // };\r\n  const handleNext = async () => {\r\n    try {\r\n      // Make a POST request to save game progress\r\n      await axios.post('http://localhost:5000/api/game/level', {level:3,  isCompleted:true},{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n\r\n      console.log('Game progress saved successfully');\r\n      \r\n      setShowQuizDiv(true);\r\n      setQuizStarted(true);\r\n      setQuizButtonVisible(false);\r\n      setShowCongrats(false);\r\n      setDroppedImages([]);\r\n      setImages([]);\r\n      setPreviewImage(null);\r\n    } catch (error) {\r\n      console.error('Error saving game progress:', error);\r\n    }\r\n  };\r\n\r\n  const handleQuizCompletion = () => {\r\n    setShowQuizDiv(false);\r\n    setQuizStarted(false);\r\n  };\r\n  const restartPuzzle = () => {\r\n    setImages(initialImages);\r\n    setDroppedImages([]);\r\n    setShowCongrats(false);\r\n    setUndoDisabled(false);\r\n\r\n    const newShuffledOrder = shuffleOrder(initialImages);\r\n    setImages((prevImages) =>\r\n      newShuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className={`slidegame ${showCongrats ? 'congrats-background2' : ''}`}>\r\n      {showCongrats ? (\r\n        <div className=\"congrats-container\">\r\n          <h1 className=\"congrats-message visible\">\r\n            Every child has right to be protected from abuse and exploitation\r\n          </h1>\r\n          <div className=\"buttons\">\r\n            <button className=\"restart-button\" onClick={restartPuzzle}>\r\n              Restart\r\n            </button>\r\n            <button className=\"next-button\" onClick={handleNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"pre-img\">\r\n            <img src=\"/puzzleimg/level3/abu.jpg\" alt=\"preview pic\" />\r\n          </div>\r\n          <div\r\n            className=\"drop-zone\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n            style={{\r\n                width: \"604px\",\r\n                height: \"604px\"\r\n            }}\r\n          >\r\n            {showQuizDiv && quizStarted ? (\r\n              <Quiz2 onComplete={handleQuizCompletion} />\r\n            ) : (\r\n              <>\r\n                {droppedImages.map((img) => (\r\n                  <img\r\n                    key={img.id}\r\n                    src={img.src}\r\n                    alt={img.alt}\r\n                    className={showCongrats ? \"fade-out\" : \"\"}\r\n                    style={{\r\n                        width: \"150px\",\r\n                        height: \"150px\"\r\n                    }}\r\n                  />\r\n                ))}\r\n                {previewImage && isHovered && (\r\n                  <img\r\n                    src={previewImage}\r\n                    alt=\"Preview\"\r\n                    style={{\r\n                      width: isHovered ? \"602px\" : \"auto\",\r\n                      height: isHovered ? \"602px\" : \"auto\",\r\n                      position: \"absolute\",\r\n                      top: \"50%\",\r\n                      left: \"50%\",\r\n                      transform: \"translate(-50%, -50%)\",\r\n                      zIndex: 1,\r\n                    }}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"image-list\">\r\n            {images.map((img) => (\r\n              <img\r\n                key={img.id}\r\n                src={img.src}\r\n                alt={img.alt}\r\n                draggable\r\n                onDragStart={(e) => handleDragStart(e, img.id)}\r\n                style={{\r\n                    width: \"90px\" \r\n                }}\r\n              />\r\n            ))}\r\n            \r\n          </div>\r\n          <button\r\n            className=\"preview-button\"\r\n            onClick={handlePreview}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n            disabled={showCongrats || quizStarted}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Preview\r\n          </button>\r\n          <button\r\n            className=\"undo-button\"\r\n            onClick={handleUndo}\r\n            disabled={undoDisabled}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Undo\r\n          </button>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default SlidePuzzle2;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL2.js",["315","316"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./GL1.css\";\r\nimport axios from \"axios\";\r\nimport Quiz1 from \"./QL2\";\r\nconst SlidePuzzle1 = () => {\r\n  const initialImages = [\r\n    { id: 1, src: \"/puzzleimg/level2/00.jpg\", alt: \"Image 1\" },\r\n    { id: 2, src: \"/puzzleimg/level2/01.jpg\", alt: \"Image 2\" },\r\n    { id: 3, src: \"/puzzleimg/level2/02.jpg\", alt: \"Image 3\" },\r\n    { id: 4, src: \"/puzzleimg/level2/10.jpg\", alt: \"Image 4\" },\r\n    { id: 5, src: \"/puzzleimg/level2/11.jpg\", alt: \"Image 5\" },\r\n    { id: 6, src: \"/puzzleimg/level2/12.jpg\", alt: \"Image 6\" },\r\n    { id: 7, src: \"/puzzleimg/level2/20.jpg\", alt: \"Image 7\" },\r\n    { id: 8, src: \"/puzzleimg/level2/21.jpg\", alt: \"Image 8\" },\r\n    { id: 9, src: \"/puzzleimg/level2/22.jpg\", alt: \"Image 9\" },\r\n  ];\r\n\r\n  const shuffleOrder = (array) => {\r\n    let shuffledOrder = [...Array(array.length).keys()];\r\n    for (let i = shuffledOrder.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledOrder[i], shuffledOrder[j]] = [\r\n        shuffledOrder[j],\r\n        shuffledOrder[i],\r\n      ];\r\n    }\r\n    return shuffledOrder;\r\n  };\r\n\r\n  const shuffledOrder = shuffleOrder(initialImages);\r\n\r\n  const correctOrder = [1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n  const [images, setImages] = useState(initialImages);\r\n  const [droppedImages, setDroppedImages] = useState([]);\r\n  const [showCongrats, setShowCongrats] = useState(false);\r\n  const [undoDisabled, setUndoDisabled] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [showQuizDiv, setShowQuizDiv] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [QuizButtonVisible, setQuizButtonVisible] = useState(true);\r\n  const authToken = localStorage.getItem('token');\r\n  useEffect(() => {\r\n    setImages((prevImages) =>\r\n      shuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  }, []);\r\n\r\n  const handleDragStart = (e, id) => {\r\n    e.dataTransfer.setData(\"text/plain\", id.toString());\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n\r\n    const draggedImageId = e.dataTransfer.getData(\"text/plain\");\r\n    const draggedImage = images.find(\r\n      (img) => img.id.toString() === draggedImageId\r\n    );\r\n\r\n    if (draggedImage) {\r\n      setDroppedImages((prevDroppedImages) => [\r\n        ...prevDroppedImages,\r\n        draggedImage,\r\n      ]);\r\n      setImages((prevImages) =>\r\n        prevImages.filter((img) => img.id !== draggedImage.id)\r\n      );\r\n    }\r\n\r\n    if (images.length === 1) {\r\n      const droppedIds = droppedImages.map((img) => img.id);\r\n      const isCorrectOrder =\r\n        JSON.stringify(droppedIds) === JSON.stringify(correctOrder);\r\n\r\n      setShowCongrats(isCorrectOrder);\r\n      setUndoDisabled(isCorrectOrder);\r\n    }\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    const lastDroppedImage = droppedImages[droppedImages.length - 1];\r\n    if (lastDroppedImage) {\r\n      setImages((prevImages) => [...prevImages, lastDroppedImage]);\r\n      setDroppedImages((prevDroppedImages) => prevDroppedImages.slice(0, -1));\r\n      setShowCongrats(false);\r\n      setUndoDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    setPreviewImage(\"/puzzleimg/level2/lab.jpg\");\r\n  };\r\n\r\n  // const handleNext = () => {\r\n  //   setShowQuizDiv(true);\r\n  //   setQuizStarted(true);\r\n  //   setQuizButtonVisible(false);\r\n  //   setShowCongrats(false);\r\n  //   setDroppedImages([]);\r\n  //   setImages([]);\r\n  //   setPreviewImage(null);\r\n  // };\r\n  const handleNext = async () => {\r\n    try {\r\n      // Make a POST request to save game progress\r\n      await axios.post('http://localhost:5000/api/game/level', {level:2,  isCompleted:true},{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n\r\n      console.log('Game progress saved successfully');\r\n      \r\n      setShowQuizDiv(true);\r\n      setQuizStarted(true);\r\n      setQuizButtonVisible(false);\r\n      setShowCongrats(false);\r\n      setDroppedImages([]);\r\n      setImages([]);\r\n      setPreviewImage(null);\r\n    } catch (error) {\r\n      console.error('Error saving game progress:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const handleQuizCompletion = () => {\r\n    setShowQuizDiv(false);\r\n    setQuizStarted(false);\r\n  };\r\n  const restartPuzzle = () => {\r\n    setImages(initialImages);\r\n    setDroppedImages([]);\r\n    setShowCongrats(false);\r\n    setUndoDisabled(false);\r\n\r\n    const newShuffledOrder = shuffleOrder(initialImages);\r\n    setImages((prevImages) =>\r\n      newShuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className={`slidegame ${showCongrats ? 'congrats-background1' : ''}`}>\r\n      {showCongrats ? (\r\n        <div className=\"congrats-container\">\r\n          <h1 className=\"congrats-message visible\">\r\n            Right to be protected from any hazardous employment till the age of 14 years \r\n          </h1>\r\n          <div className=\"buttons\">\r\n            <button className=\"restart-button\" onClick={restartPuzzle}>\r\n              Restart\r\n            </button>\r\n            <button className=\"next-button\" onClick={handleNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"pre-img\">\r\n            <img src=\"/puzzleimg/level2/lab.jpg\" alt=\"preview pic\" />\r\n          </div>\r\n          <div\r\n            className=\"drop-zone\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n          >\r\n            {showQuizDiv && quizStarted ? (\r\n              <Quiz1 onComplete={handleQuizCompletion} />\r\n            ) : (\r\n              <>\r\n                {droppedImages.map((img) => (\r\n                  <img\r\n                    key={img.id}\r\n                    src={img.src}\r\n                    alt={img.alt}\r\n                    className={showCongrats ? \"fade-out\" : \"\"}\r\n                  />\r\n                ))}\r\n                {previewImage && isHovered && (\r\n                  <img\r\n                    src={previewImage}\r\n                    alt=\"Preview\"\r\n                    style={{\r\n                      width: isHovered ? \"595px\" : \"auto\",\r\n                      height: isHovered ? \"595px\" : \"auto\",\r\n                      position: \"absolute\",\r\n                      top: \"50%\",\r\n                      left: \"50%\",\r\n                      transform: \"translate(-50%, -50%)\",\r\n                      zIndex: 1,\r\n                    }}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"image-list\">\r\n            {images.map((img) => (\r\n              <img\r\n                key={img.id}\r\n                src={img.src}\r\n                alt={img.alt}\r\n                draggable\r\n                onDragStart={(e) => handleDragStart(e, img.id)}\r\n                style={{\r\n                  height: \"110px\" \r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n          <button\r\n            className=\"preview-button\"\r\n            onClick={handlePreview}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n            disabled={showCongrats || quizStarted}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Preview\r\n          </button>\r\n          <button\r\n            className=\"undo-button\"\r\n            onClick={handleUndo}\r\n            disabled={undoDisabled}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Undo\r\n          </button>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default SlidePuzzle1;\r\n","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\GL4.js",["317","318"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./GL1.css\";\r\nimport Quiz3 from \"./QL4\";\r\nimport axios from \"axios\";\r\nconst SlidePuzzle3 = () => {\r\n  const initialImages = [\r\n    { id: 1, src: \"/puzzleimg/level4/00.webp\", alt: \"Image 1\" },\r\n    { id: 2, src: \"/puzzleimg/level4/10.webp\", alt: \"Image 2\" },\r\n    { id: 3, src: \"/puzzleimg/level4/20.webp\", alt: \"Image 3\" },\r\n    { id: 4, src: \"/puzzleimg/level4/30.webp\", alt: \"Image 4\" },\r\n    { id: 5, src: \"/puzzleimg/level4/01.webp\", alt: \"Image 5\" },\r\n    { id: 6, src: \"/puzzleimg/level4/11.webp\", alt: \"Image 6\" },\r\n    { id: 7, src: \"/puzzleimg/level4/21.webp\", alt: \"Image 7\" },\r\n    { id: 8, src: \"/puzzleimg/level4/31.webp\", alt: \"Image 8\" },\r\n    { id: 9, src: \"/puzzleimg/level4/02.webp\", alt: \"Image 9\" },\r\n    { id: 10, src: \"/puzzleimg/level4/12.webp\", alt: \"Image 10\" },\r\n    { id: 11, src: \"/puzzleimg/level4/22.webp\", alt: \"Image 11\" },\r\n    { id: 12, src: \"/puzzleimg/level4/32.webp\", alt: \"Image 12\" },\r\n    { id: 13, src: \"/puzzleimg/level4/03.webp\", alt: \"Image 13\" },\r\n    { id: 14, src: \"/puzzleimg/level4/13.webp\", alt: \"Image 14\" },\r\n    { id: 15, src: \"/puzzleimg/level4/23.webp\", alt: \"Image 15\" },\r\n    { id: 16, src: \"/puzzleimg/level4/33.webp\", alt: \"Image 16\" },\r\n  ];\r\n\r\n  const shuffleOrder = (array) => {\r\n    let shuffledOrder = [...Array(array.length).keys()];\r\n    for (let i = shuffledOrder.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledOrder[i], shuffledOrder[j]] = [\r\n        shuffledOrder[j],\r\n        shuffledOrder[i],\r\n      ];\r\n    }\r\n    return shuffledOrder;\r\n  };\r\n\r\n  const shuffledOrder = shuffleOrder(initialImages);\r\n\r\n  const correctOrder = [1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12,13,14,15];\r\n\r\n  const [images, setImages] = useState(initialImages);\r\n  const [droppedImages, setDroppedImages] = useState([]);\r\n  const [showCongrats, setShowCongrats] = useState(false);\r\n  const [undoDisabled, setUndoDisabled] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [showQuizDiv, setShowQuizDiv] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [QuizButtonVisible, setQuizButtonVisible] = useState(true);\r\n  const authToken = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    setImages((prevImages) =>\r\n      shuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  }, []);\r\n\r\n  const handleDragStart = (e, id) => {\r\n    e.dataTransfer.setData(\"text/plain\", id.toString());\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n\r\n    const draggedImageId = e.dataTransfer.getData(\"text/plain\");\r\n    const draggedImage = images.find(\r\n      (img) => img.id.toString() === draggedImageId\r\n    );\r\n\r\n    if (draggedImage) {\r\n      setDroppedImages((prevDroppedImages) => [\r\n        ...prevDroppedImages,\r\n        draggedImage,\r\n      ]);\r\n      setImages((prevImages) =>\r\n        prevImages.filter((img) => img.id !== draggedImage.id)\r\n      );\r\n    }\r\n\r\n    if (images.length === 1) {\r\n      const droppedIds = droppedImages.map((img) => img.id);\r\n      const isCorrectOrder =\r\n        JSON.stringify(droppedIds) === JSON.stringify(correctOrder);\r\n\r\n      setShowCongrats(isCorrectOrder);\r\n      setUndoDisabled(isCorrectOrder);\r\n    }\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    const lastDroppedImage = droppedImages[droppedImages.length - 1];\r\n    if (lastDroppedImage) {\r\n      setImages((prevImages) => [...prevImages, lastDroppedImage]);\r\n      setDroppedImages((prevDroppedImages) => prevDroppedImages.slice(0, -1));\r\n      setShowCongrats(false);\r\n      setUndoDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    setPreviewImage(\"/puzzleimg/level4/exp.webp\");\r\n  };\r\n\r\n  // const handleNext = () => {\r\n  //   setShowQuizDiv(true);\r\n  //   setQuizStarted(true);\r\n  //   setQuizButtonVisible(false);\r\n  //   setShowCongrats(false);\r\n  //   setDroppedImages([]);\r\n  //   setImages([]);\r\n  //   setPreviewImage(null);\r\n  // };\r\n  const handleNext = async () => {\r\n    try {\r\n      // Make a POST request to save game progress\r\n      await axios.post('http://localhost:5000/api/game/level', {level:4,  isCompleted:true},{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n\r\n      console.log('Game progress saved successfully');\r\n      \r\n      setShowQuizDiv(true);\r\n      setQuizStarted(true);\r\n      setQuizButtonVisible(false);\r\n      setShowCongrats(false);\r\n      setDroppedImages([]);\r\n      setImages([]);\r\n      setPreviewImage(null);\r\n    } catch (error) {\r\n      console.error('Error saving game progress:', error);\r\n    }\r\n  };\r\n  const handleQuizCompletion = () => {\r\n    setShowQuizDiv(false);\r\n    setQuizStarted(false);\r\n  };\r\n  const restartPuzzle = () => {\r\n    setImages(initialImages);\r\n    setDroppedImages([]);\r\n    setShowCongrats(false);\r\n    setUndoDisabled(false);\r\n\r\n    const newShuffledOrder = shuffleOrder(initialImages);\r\n    setImages((prevImages) =>\r\n      newShuffledOrder.map((index) => ({ ...prevImages[index] }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className={`slidegame ${showCongrats ? 'congrats-background3' : ''}`}>\r\n      {showCongrats ? (\r\n        <div className=\"congrats-container\">\r\n          <h1 className=\"congrats-message visible\">\r\n            Every child has right to express their views and opinions\r\n          </h1>\r\n          <div className=\"buttons\">\r\n            <button className=\"restart-button\" onClick={restartPuzzle}>\r\n              Restart\r\n            </button>\r\n            <button className=\"next-button\" onClick={handleNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"pre-img\">\r\n            <img src=\"/puzzleimg/level4/exp.webp\" alt=\"preview pic\" style={{height:\"200px\"}}/>\r\n          </div>\r\n          <div\r\n            className=\"drop-zone\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n            style={{\r\n                width: \"604px\",\r\n                height: \"604px\"\r\n            }}\r\n          >\r\n            {showQuizDiv && quizStarted ? (\r\n              <Quiz3 onComplete={handleQuizCompletion} />\r\n            ) : (\r\n              <>\r\n                {droppedImages.map((img) => (\r\n                  <img\r\n                    key={img.id}\r\n                    src={img.src}\r\n                    alt={img.alt}\r\n                    className={showCongrats ? \"fade-out\" : \"\"}\r\n                    style={{\r\n                        width: \"150px\",\r\n                        height: \"150px\"\r\n                    }}\r\n                  />\r\n                ))}\r\n                {previewImage && isHovered && (\r\n                  <img\r\n                    src={previewImage}\r\n                    alt=\"Preview\"\r\n                    style={{\r\n                      width: isHovered ? \"602px\" : \"auto\",\r\n                      height: isHovered ? \"602px\" : \"auto\",\r\n                      position: \"absolute\",\r\n                      top: \"50%\",\r\n                      left: \"50%\",\r\n                      transform: \"translate(-50%, -50%)\",\r\n                      zIndex: 1,\r\n                    }}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"image-list\">\r\n            {images.map((img) => (\r\n              <img\r\n                key={img.id}\r\n                src={img.src}\r\n                alt={img.alt}\r\n                draggable\r\n                onDragStart={(e) => handleDragStart(e, img.id)}\r\n                style={{\r\n                    height: \"62px\" \r\n                }}\r\n              />\r\n            ))}\r\n            \r\n          </div>\r\n          <button\r\n            className=\"preview-button\"\r\n            onClick={handlePreview}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n            disabled={showCongrats || quizStarted}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Preview\r\n          </button>\r\n          <button\r\n            className=\"undo-button\"\r\n            onClick={handleUndo}\r\n            disabled={undoDisabled}\r\n            style={{ display: undoDisabled ? \"none\" : \"block\" }}\r\n          >\r\n            Undo\r\n          </button>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default SlidePuzzle3;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz2.js",["319","320","321"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video4W.js",["322"],"// import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import './play.css'; // Make sure to replace with the correct CSS file\r\n\r\n// const Watch = () => {\r\n//   const videoId = 'QGLnnk46UQ0'; // Replace with the actual video ID\r\n\r\n//   return (\r\n//     <div className='video1'>\r\n//       <iframe\r\n//         className='vid-iframe'\r\n//         width='900'\r\n//         height='450'\r\n//         src={`https://www.youtube.com/embed/${videoId}`} // Use the embed URL\r\n//         title='YouTube video player'\r\n//         frameBorder='0'\r\n//         allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share'\r\n//         allowFullScreen\r\n//       ></iframe>\r\n//       <ul className='vid-ul'>\r\n//         <Link to='/watchQuiz4'>\r\n//           <button className='vid-start-button'>Start Quiz</button>\r\n//         </Link>\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Watch;\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './play.css'; // Make sure to replace with the correct CSS file\r\n\r\nconst Watch = () => {\r\n  const videoId = 'QGLnnk46UQ0'; // Replace with the actual video ID\r\n  const playerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Load the YouTube API script\r\n    const script = document.createElement('script');\r\n    script.src = 'https://www.youtube.com/iframe_api';\r\n    document.head.appendChild(script);\r\n\r\n    script.onload = () => {\r\n      // Initialize the YouTube Player API\r\n      window.onYouTubeIframeAPIReady = () => {\r\n        const player = new window.YT.Player('youtube-player', {\r\n          height: '450',\r\n          width: '900',\r\n          videoId: videoId,\r\n          events: {\r\n            onReady: (event) => {\r\n              playerRef.current = event.target;\r\n            },\r\n            onStateChange: (event) => {\r\n              // Check if the video has ended (state code 0)\r\n              if (event.data === window.YT.PlayerState.ENDED) {\r\n                // Redirect to the quiz page when the video ends\r\n                window.location.href = '/watchQuiz4';\r\n              }\r\n            },\r\n          },\r\n        });\r\n      };\r\n    };\r\n\r\n    return () => {\r\n      // Clean up the script tag when the component unmounts\r\n      document.head.removeChild(script);\r\n    };\r\n  }, [videoId]);\r\n\r\n  return (\r\n    <div className='video1'>\r\n      <div id='youtube-player'></div>\r\n      <ul className='vid-ul'>\r\n        {/* You can keep the button if you want to allow users to manually start the quiz */}\r\n        <Link to='/watchQuiz4'>\r\n          <button className='vid-start-button'>Start Quiz</button>\r\n        </Link>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Watch;\r\n","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz4.js",["323"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video3W.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video1W.js",["324"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz1.js",["325"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\WQuiz3.js",["326"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\vidplay\\Video2W.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\MessageParser.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\ActionProvider.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\config.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\GridViewAg1.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\ScoreBoard.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL1.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL3.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL4.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\puzzleag1\\QL2.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\Avatar.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\StartBtn.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\DipslayImage.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\components\\StartSlow.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Bot\\data.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\watchvid\\VideoW.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Sashakt.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Chatbot.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\MyNav.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\gbot.js",["327"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Home.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\AboutUs.js",["328","329","330","331","332","333"],"import React from \"react\";\r\nconst AboutUs = () => {\r\n    return ( \r\n        <div className=\"about-us\">\r\n        <div className=\"about-mainpage\">\r\n        <h2>About Us: Empowering Champions</h2>\r\n        <p>\r\n          We aspire to be the Guardians of the Rainbow Nation, a dedicated team of passionate educators, game designers, and social activists united by a common mission – to ignite a nationwide movement of empowered children in India.\r\n        </p>\r\n        <p>\r\n          In our belief, every child in India deserves to shine under a vibrant sky, where their fundamental rights are not mere words on a page but superpowers they can wield with confidence.\r\n        </p>\r\n        <h3>Our Challenge</h3>\r\n        <p>\r\n          Millions of Indian children, regardless of their background, face challenges navigating their rights. Traditional methods can be dry and uninspiring, leaving them unaware and vulnerable.\r\n        </p>\r\n        <h3>Our Solution</h3>\r\n        <p>\r\n          We're building a revolutionary gamified platform that transforms rights education into an exciting, accessible adventure.\r\n        </p>\r\n        <ul>\r\n          <li><strong>Embark on quests:</strong> Explore immersive story-driven scenarios tackling real-world situations like bullying, child labor, and access to education.</li>\r\n          <li><strong>Unleash their inner hero:</strong> Encouraging them to stand up for themselves and others</li>\r\n          <li><strong>Team up and soar:</strong> Children from diverse backgrounds connect and collaborate, building a community of young changemakers.</li>\r\n          <li><strong>Become real-world champions:</strong> Equipped with knowledge and confidence, they'll stand up for themselves and others, influencing their families, communities, and even policy change.</li>\r\n        </ul>\r\n        <p>\r\n          Remember, every child is a hero waiting to be unleashed. Let's give them the tools and the stage to write their own stories of courage and change.\r\n        </p>\r\n        <h3>Who We Are</h3>\r\n        <p>\r\n          We're not just tech wizards or child advocates; we're dream weavers and future architects. We believe in the power of play to empower, the strength of unity to overcome, and the potential of every child to light up the Rainbow Nation.\r\n        </p>\r\n        <h3>\r\n            Meet the Team\r\n        </h3>\r\n        <div className=\"team\">\r\n            <img src=\"/css-img/tsaloni.png\"/>\r\n            <img src=\"/css-img/tdivya.png\"/>\r\n            <img src=\"/css-img/tsudha.png\"/>\r\n            <img src=\"/css-img/tsri.png\"/>\r\n            <img src=\"/css-img/tsam.png\"/>\r\n            <img src=\"/css-img/tud.png\"/>\r\n        </div>\r\n        \r\n        </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default AboutUs;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Games\\cgam\\Cgamquiz.js",["334"],"// import React, { useState } from \"react\";\r\n\r\n// const CgamQuiz = () => {\r\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n//   const [userAnswers, setUserAnswers] = useState([]);\r\n  \r\n//   const questions = [\r\n//     {\r\n//       question: \" Which fundamental right ensures the right to education for children in India?\",\r\n//       options: [\"Right to Equality\", \"Right to Freedom of Religion\", \"Right to Education\", \"Right to Life and Personal Liberty\"],\r\n//       correctAnswer: \"Right to Education\"\r\n//     },\r\n//     {\r\n//         question: \" What does the Juvenile Justice (Care and Protection of Children) Act focus on?\",\r\n//         options: [\"Child Labour\", \"Child Marriage\", \"Protection of juvenile offenders\", \"Child Trafficking\"],\r\n//         correctAnswer: \"Protection of juvenile offenders\"\r\n//       },\r\n//       {\r\n//         question: \" According to the POCSO Act, what is the age of consent for sexual activities involving a child?\",\r\n//         options: [\"14 years\", \"16 years\", \"18 years\", \"21 years\"],\r\n//         correctAnswer: \"16 years\"\r\n//       },\r\n//       {\r\n//         question: \" Which organization in India is responsible for the implementation of child welfare programs?\",\r\n//         options: [\"Ministry of Education\", \"Ministry of Women and Child Development\", \"Ministry of Health and Family Welfare\", \"Ministry of Social Justice and Empowerment\"],\r\n//         correctAnswer: \" Ministry of Women and Child Development\"\r\n//       },\r\n//       {\r\n//         question: \" What is the purpose of the Integrated Child Development Services (ICDS) in India?\",\r\n//         options: [\" Providing free education to children\", \"Ensuring proper nutrition and healthcare for mothers and children\", \"Preventing child trafficking\", \"Eliminating child labor\"],\r\n//         correctAnswer: \"Protection of juvenile offenders\"\r\n//       },\r\n//       {\r\n//         question: \"  What does the term Bal Swaraj refer to in the context of child rights?\",\r\n//         options: [\"Right to Play\", \"Right to Play\", \"Children's Self-Governance\", \"Right to Health\"],\r\n//         correctAnswer: \"Children's Self-Governance\"\r\n//       },\r\n//       {\r\n//         question: \" What is the legal age for employment in India according to the Child Labour (Prohibition and Regulation) Act?\",\r\n//         options: [\"12 years\", \"14 years\", \"16 years\", \"18 years\"],\r\n//         correctAnswer: \"14 years\"\r\n//       },\r\n   \r\n//   ];\r\n\r\n//   const handleAnswerSelect = (selectedOption) => {\r\n//     setUserAnswers((prevAnswers) => [...prevAnswers, selectedOption]);\r\n//     if (currentQuestion < questions.length - 1) {\r\n//       setCurrentQuestion((prevQuestion) => prevQuestion + 1);\r\n//     } else {\r\n//       // Quiz is completed, you can handle results or submit answers here\r\n//       console.log(\"User Answers:\", userAnswers);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"cquiz\">\r\n//       <h2>Question {currentQuestion + 1}</h2>\r\n//       <p>{questions[currentQuestion].question}</p>\r\n//       <form>\r\n//         {questions[currentQuestion].options.map((option, index) => (\r\n//           <div key={index}>\r\n//             <input\r\n//               type=\"radio\"\r\n//               id={`option${index}`}\r\n//               name=\"answer\"\r\n//               value={option}\r\n//               onChange={() => handleAnswerSelect(option)}\r\n//             />\r\n//             <label htmlFor={`option${index}`}>{option}</label>\r\n//           </div>\r\n//         ))}\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CgamQuiz;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst CgamQuiz = () => {\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n              question: \" Which fundamental right ensures the right to education for children in India?\",\r\n              options: [\"Right to Equality\", \"Right to Freedom of Religion\", \"Right to Education\", \"Right to Life and Personal Liberty\"],\r\n              correctAnswer: \"Right to Education\"\r\n            },\r\n            {\r\n                question: \" What does the Juvenile Justice (Care and Protection of Children) Act focus on?\",\r\n                options: [\"Child Labour\", \"Child Marriage\", \"Protection of juvenile offenders\", \"Child Trafficking\"],\r\n                correctAnswer: \"Protection of juvenile offenders\"\r\n              },\r\n              {\r\n                question: \" According to the POCSO Act, what is the age of consent for sexual activities involving a child?\",\r\n                options: [\"14 years\", \"16 years\", \"18 years\", \"21 years\"],\r\n                correctAnswer: \"16 years\"\r\n              },\r\n              {\r\n                question: \" Which organization in India is responsible for the implementation of child welfare programs?\",\r\n                options: [\"Ministry of Education\", \"Ministry of Women and Child Development\", \"Ministry of Health and Family Welfare\", \"Ministry of Social Justice and Empowerment\"],\r\n                correctAnswer: \" Ministry of Women and Child Development\"\r\n              },\r\n              {\r\n                question: \" What is the purpose of the Integrated Child Development Services (ICDS) in India?\",\r\n                options: [\" Providing free education to children\", \"Ensuring proper nutrition and healthcare for mothers and children\", \"Preventing child trafficking\", \"Eliminating child labor\"],\r\n                correctAnswer: \"Protection of juvenile offenders\"\r\n              },\r\n              {\r\n                question: \"  What does the term Bal Swaraj refer to in the context of child rights?\",\r\n                options: [\"Right to Play\", \"Right to Play\", \"Children's Self-Governance\", \"Right to Health\"],\r\n                correctAnswer: \"Children's Self-Governance\"\r\n              },\r\n              {\r\n                question: \" What is the legal age for employment in India according to the Child Labour (Prohibition and Regulation) Act?\",\r\n                options: [\"12 years\", \"14 years\", \"16 years\", \"18 years\"],\r\n                correctAnswer: \"14 years\"\r\n              },\r\n  ]);\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Shuffle questions when component mounts\r\n    const shuffledQuestions = shuffleArray(questions);\r\n    // Take the first 5 questions\r\n    setQuestions(shuffledQuestions.slice(0, 5));\r\n  }, []);\r\n\r\n  const shuffleArray = (array) => {\r\n    const shuffledArray = [...array];\r\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n    }\r\n    return shuffledArray;\r\n  };\r\n\r\n  const handleAnswerSelect = (selectedOption) => {\r\n    setUserAnswers((prevAnswers) => [...prevAnswers, selectedOption]);\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion((prevQuestion) => prevQuestion + 1);\r\n    } else {\r\n      // Quiz is completed, calculate the score\r\n      const correctAnswers = questions.map((question) => question.correctAnswer);\r\n      const userScore = userAnswers.filter((answer, index) => answer === correctAnswers[index]).length;\r\n      setScore(userScore);\r\n      setQuizCompleted(true);\r\n    }\r\n  };\r\n\r\n  const restartQuiz = () => {\r\n    setCurrentQuestion(0);\r\n    setUserAnswers([]);\r\n    setScore(0);\r\n    setQuizCompleted(false);\r\n    // Shuffle questions again for a new quiz\r\n    const shuffledQuestions = shuffleArray(questions);\r\n    setQuestions(shuffledQuestions.slice(0, 5));\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-quiz-p\">\r\n    <div className=\"cquiz\">\r\n      {quizCompleted ? (\r\n        <div className=\"cquiz-win\">\r\n          {score === 5 ? (\r\n            <p>Congratulations! You answered all questions correctly.</p>\r\n          ) : (\r\n            <div className=\"cquiz-lost\">\r\n              <p>Oops! You got {score} out of 5 questions correct.</p>\r\n              <button className=\"restart-cquiz\" onClick={restartQuiz}>Restart Quiz</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"cquiz-quiz\">\r\n          <h2>Question {currentQuestion + 1}</h2>\r\n          <p>{questions[currentQuestion].question}</p>\r\n          <form>\r\n            {questions[currentQuestion].options.map((option, index) => (\r\n              <div key={index}>\r\n                <input\r\n                  type=\"radio\"\r\n                  id={`option${index}`}\r\n                  name=\"answer\"\r\n                  value={option}\r\n                  onChange={() => handleAnswerSelect(option)}\r\n                />\r\n                <label htmlFor={`option${index}`}>{option}</label>\r\n              </div>\r\n            ))}\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CgamQuiz;\r\n","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\EduCards.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTDevelopment.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTDiscrimination.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTEducation.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTParticipation.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTProtection.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\RTSurvival.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2home.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\Memory.js",["335"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './ag2.css'\r\nclass Memory extends React.Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"Mem\"  style={{ backgroundImage: `url(\"ag2images/homepic2.jpg\")`  }}>\r\n                    <div className=\" mem-main \">\r\n                        <div className=\"mem-cards\">\r\n                            <div className=\"mem-card\" >\r\n                                <img src=\"/ag2images/memory.jpeg\" className=\"card-img-center\" alt=\"...\" />\r\n                                <div className=\"mem-card-body\">\r\n                                    <h5 className=\"mem-card-title\"></h5>\r\n                                    <p className=\"mem-card-text\"></p>\r\n                                    <Link to=\"/GameBoard\" className=\"btn btn-primary\">Start the Game</Link>\r\n                                </div>\r\n                            </div>\r\n                           \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Memory;\r\n","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\WordGames.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\EduMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\DevMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\ProMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\ParMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\DisMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\SurMcq.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video1.js",["336"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video2.js",["337"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\Video3.js",["338"],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\VidAg2.js",["339","340","341"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './ag2.css'\r\nclass McqCards extends React.Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <div className=\"ag2-vid\" >\r\n                <div className=\"ag2vid\" style={{ backgroundImage: `url(\"ag2images/homepic2.jpg\")`  }} >\r\n                    <div className=\"ag2vid- main \" >\r\n                        <div className=\"ag2vid-cards\">\r\n                            <div className=\"ag2vid-card\">\r\n                                <img src=\"/ag2images/education.jpeg\" className=\"card-img-top\" alt=\"...\" />\r\n                                <div className=\"ag2vid-card-body\">\r\n                                    <h5 className=\"ag2vid-card-title\"></h5>\r\n                                    <p className=\"ag2vid-card-text\">Importance of Education</p>\r\n                                    <Link to=\"/Video1\" className=\"btn btn-primary\">Let's start</Link>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"ag2vid-card\" >\r\n                                <img src=\"/ag2images/touch.jpg\" className=\"card-img-top\" alt=\"...\" />\r\n                                <div className=\"ag2vid-card-body\">\r\n                                    <h5 className=\"ag2vid-card-title\"></h5>\r\n                                    <p className=\"ag2vid-card-text\">Good touch-Bad touch</p>\r\n                                    <Link to=\"/Video2\" className=\"btn btn-primary\">Let's start</Link>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"ag2vid-card\">\r\n                                <img src=\"/ag2images/rights.jpeg\" className=\"card-img-top\" alt=\"...\" />\r\n                                <div className=\"ag2vid-card-body\">\r\n                                    <h5 className=\"ag2vid-card-title\"></h5>\r\n                                    <p className=\"ag2vid-card-text\">Child-Rights</p>\r\n                                    <Link to=\"/Video3\" className=\"btn btn-primary\">Let's start</Link>\r\n                                </div>\r\n                            </div>\r\n                          \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default McqCards;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent1.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent2.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\QuizComponent3.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\GameBoard.js",[],"C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\JumbledSentenceGame.js",["342","343"],"import React, { useState, useEffect } from \"react\";\r\n// import './JumbledSentenceGame.css';\r\nimport axios from \"axios\";\r\n\r\nconst JumbledSentenceGame = () => {\r\n  const [finalResults, setFinalResults] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [input, setInput] = useState(\"\");\r\n  const [displayedQuestion, setDisplayedQuestion] = useState(\"\");\r\n  const [showQuestion, setShowQuestion] = useState(true);\r\n  const authToken = localStorage.getItem('token');\r\n\r\n  const questions = [\r\n    { text: \"Dream big and work hard\", isCorrect: true },\r\n    { text: \"Don't be afraid be focused\", isCorrect: true },\r\n    { text: \"Education for child is like wings for a bird\", isCorrect: true },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setShowQuestion(true);\r\n    setDisplayedQuestion(questions[currentQuestion].text);\r\n\r\n    const timeout = setTimeout(() => {\r\n      const words = questions[currentQuestion].text.split(\" \");\r\n      const scrambledArray = words.sort(() => Math.random() - 0.5);\r\n      setDisplayedQuestion(scrambledArray.join(\" \"));\r\n    }, 3000);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [currentQuestion]);\r\n\r\n  const checkTrue = () => {\r\n    if (input.toLowerCase() === questions[currentQuestion].text.toLowerCase()) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    if (currentQuestion < questions.length - 1) {\r\n      setShowQuestion(false);\r\n      setTimeout(() => {\r\n        setCurrentQuestion(currentQuestion + 1);\r\n        setInput(\"\");\r\n      }, 3000);\r\n    } else {\r\n      setFinalResults(true);\r\n    }\r\n  };\r\n\r\n  const resetButton = () => {\r\n    setCurrentQuestion(0);\r\n    setFinalResults(false);\r\n    setScore(0);\r\n  };\r\n  const storeScore = async () => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/game/jumblescore', {  score: score  },{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n      console.log('Score saved to the server.');\r\n    } \r\n    catch (error) {\r\n      console.error('Error saving data to server:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"jumb\" style={{ backgroundImage: `url(\"ag2images/homepic2.jpg\")`  }}>\r\n    <div className=\"jumb-app\" >\r\n      <h1>Jumbled Sentence Game</h1>\r\n\r\n      <h2>Current Score: {score}</h2>\r\n\r\n      {finalResults ? (\r\n        <div className=\"sj-resultCard\">\r\n          <h1>Final Score</h1>\r\n          <h2>\r\n            You scored {score} out of {questions.length}\r\n          </h2>\r\n          <button className=\"btn btn-danger\" onClick={resetButton}>\r\n            Restart\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"sj-questionCard\">\r\n          {showQuestion ? (\r\n            <>\r\n              <h2>\r\n                Question {currentQuestion + 1} out of {questions.length}\r\n              </h2>\r\n              <h3>{displayedQuestion}</h3>\r\n            </>\r\n          ) : (\r\n            <p>Get ready for the next question!</p>\r\n          )}\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter the sentence\"\r\n            className=\"sj-input\"\r\n            id=\"sj-input\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <br />\r\n          <button className=\"btn btn-secondary\" onClick={checkTrue}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JumbledSentenceGame;\r\n","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\WordSearchGame.js",["344","345","346"],"import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './gamag2.css';\r\n\r\nconst WordSearchGame = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [words, setWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const gridSize = 8;\r\n  const authToken = localStorage.getItem('token');\r\n\r\n  const levels = [\r\n    { words: ['CHILD', 'PARENT', 'POWER', 'BOOK', 'BAG'], gridSize: 10 },\r\n    { words: ['TEACHER', 'RIGHTS', 'FREEDOM', 'EDUCATION', 'EMPOWERMENT'], gridSize: 10 },\r\n    // Add more levels as needed\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Initialize the grid and words for the current level\r\n    const currentLevel = levels[level - 1];\r\n    const newGrid = Array.from({ length: currentLevel.gridSize }, () =>\r\n      Array.from({ length: currentLevel.gridSize }, () =>\r\n        String.fromCharCode(65 + Math.floor(Math.random() * 26))\r\n      )\r\n    );\r\n    setGrid(newGrid);\r\n    setWords(currentLevel.words);\r\n  }, [level]);\r\n\r\n  const handleCellClick = (row, col) => {\r\n    // Toggle the selected state of the cell\r\n    const newSelectedCells = [...selectedCells];\r\n    const isSelected = newSelectedCells.some(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (isSelected) {\r\n      setSelectedCells(newSelectedCells.filter((cell) => !(cell.row === row && cell.col === col)));\r\n    }\r\n    else {\r\n      setSelectedCells([...newSelectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  const checkSelectedWords = () => {\r\n    const selectedWord = selectedCells.map(\r\n      (cell) => grid[cell.row][cell.col]\r\n    ).join('');\r\n\r\n    if (words.includes(selectedWord)) {\r\n      setScore(score + selectedWord.length);\r\n      setSelectedCells([]);\r\n    }\r\n  };\r\n\r\n  const handleLevelChange = () => {\r\n    setLevel((prevLevel) => (prevLevel < levels.length ? prevLevel + 1 : 1));\r\n    setScore(0);\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  const renderGrid = () => {\r\n    return grid.map((row, rowIndex) => (\r\n      <div key={rowIndex} className=\"sword-grid-row\">\r\n        {row.map((cell, colIndex) => (\r\n          <div\r\n            key={colIndex}\r\n            className={`sword-grid-cell ${selectedCells.some(\r\n              (selectedCell) =>\r\n                selectedCell.row === rowIndex && selectedCell.col === colIndex\r\n            ) ? 'selected' : ''}`}\r\n            onClick={() => handleCellClick(rowIndex, colIndex)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    ));\r\n  };\r\n  const storeScore = async () => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/game/wordscore', {  score: score, level:level },{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n      console.log('Score and level saved to the server.');\r\n    } \r\n    catch (error) {\r\n      console.error('Error saving data to server:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sword\" style={{ backgroundImage: `url(\"ag2images/homepic2.jpg\")`  }}>\r\n      <div className=\"word-search-game\">\r\n        <div className=\"sword-score\">\r\n          <div className=\"sword-score\">Score: {score}</div>\r\n      \r\n          <div className=\"sword-level\">Level: {level}</div>\r\n         \r\n          <button className=\"sword-but\" onClick={handleLevelChange}>Next Level</button>\r\n          <br />\r\n\r\n        </div>\r\n        <div className=\"sword-grid\">{renderGrid()}</div>\r\n        <div className=\"sword-list\">\r\n          <h3>WORD LIST:</h3>\r\n          <ul>\r\n            {words.map((word, index) => (\r\n              <li key={index} className={selectedCells.length === word.length && selectedCells.every((cell, i) => cell.row === index && cell.col === i) ? 'found' : ''}>\r\n                {word}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <br />\r\n        <button  className=\"sword-but\" onClick={checkSelectedWords}>Check score of Selected Word</button>\r\n      </div>\r\n      </div>\r\n      );\r\n};\r\n\r\nexport default WordSearchGame;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\ag2\\ag2Games\\WordJumble.js",["347","348"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport './gamag2.css';\r\nimport axios from 'axios';\r\n\r\nconst WordJumble = ({ onScoreChange, onLastWordContentChange }) => {\r\n  const words = [\r\n    { word: 'CHILDLABOUR', content: 'Hint: Harmful activity of every children' },\r\n    { word: 'PARENT', content: 'Hint: Support system of every child' },\r\n    { word: 'EDUCATION', content: 'Hint: Process of getting knowledge' },\r\n    { word: 'FREEDOM', content: 'Hint: State of being free' },\r\n    { word: 'EMPOWERMENT', content: 'Hint: Having power over their own lives' },\r\n  ];\r\n\r\n  const [wordIndex, setWordIndex] = useState(0);\r\n  const [jumbledWord, setJumbledWord] = useState('');\r\n  const [guess, setGuess] = useState('');\r\n  const [score, setScore] = useState(0);\r\n  const authToken = localStorage.getItem('token');\r\n  const getRandomWord = () => words[wordIndex];\r\n\r\n  const jumbleWord = (word) => word.split('').sort(() => Math.random() - 0.5).join('');\r\n\r\n  const handleNewWord = () => {\r\n    const newWord = getRandomWord();\r\n    setJumbledWord(jumbleWord(newWord.word));\r\n    setGuess('');\r\n    onLastWordContentChange(newWord.content);\r\n  };\r\n\r\n  const handleGuess = () => {\r\n    const normalizedGuess = guess.toUpperCase(); // Convert guess to uppercase\r\n\r\n    if (normalizedGuess === words[wordIndex].word) {\r\n      const newScore = score + 1;\r\n      setScore(newScore);\r\n      onScoreChange(newScore);\r\n      setWordIndex((prevIndex) => (prevIndex + 1) % words.length);\r\n      handleNewWord();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleNewWord();\r\n  }, [wordIndex]);\r\n\r\n  const storeScore = async () => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/game/jumblescore', {  score: score  },{headers: {\r\n        'auth-token': authToken,\r\n        'Content-Type': 'application/json', \r\n      }});\r\n      console.log('Score saved to the server.');\r\n    } \r\n    catch (error) {\r\n      console.error('Error saving data to server:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-jumble\">\r\n      <h1>WORD JUMBLE GAME</h1>\r\n      <p>{words[wordIndex].content}</p>\r\n      <div className=\"jumbled-word\">{jumbledWord}</div>\r\n      <div>\r\n        <input\r\n          className='word-jumble-inp'\r\n          type=\"text\"\r\n          placeholder=\"Your guess\"\r\n          value={guess}\r\n          onChange={(e) => setGuess(e.target.value)}\r\n        />\r\n      </div>\r\n      <br />\r\n      <button className='jword-but' onClick={handleGuess}>Submit</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Scoreboard = ({ score, lastWordContent }) => {\r\n  return (\r\n    <div className=\"jword-score\" >\r\n      <h1 className='jword-h1'>Scoreboard</h1>\r\n      <p className='jword-p'>Current Score: {score}</p>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [lastWordContent, setLastWordContent] = useState('');\r\n\r\n  const handleScoreChange = (newScore) => {\r\n    setScore(newScore);\r\n  };\r\n\r\n  const handleLastWordContentChange = (content) => {\r\n    setLastWordContent(content);\r\n  };\r\n\r\n  return (\r\n    <div className='j-word'  style={{ backgroundImage: `url(\"ag2images/homepic2.jpg\")`  }}>\r\n    <div className=\"jword\">\r\n      <WordJumble\r\n        onScoreChange={handleScoreChange}\r\n        onLastWordContentChange={handleLastWordContentChange}\r\n      />\r\n      <br />\r\n      <Scoreboard score={score} lastWordContent={lastWordContent} />\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\nexport default App;","C:\\Users\\salon\\OneDrive\\Documents\\sashakt\\src\\Component\\Prents.js",["349"],{"ruleId":"350","replacedBy":"351"},{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","severity":1,"message":"355","line":2,"column":17,"nodeType":"356","messageId":"357","endLine":2,"endColumn":23},{"ruleId":"354","severity":1,"message":"358","line":9,"column":8,"nodeType":"356","messageId":"357","endLine":9,"endColumn":12},{"ruleId":"354","severity":1,"message":"359","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"360","severity":1,"message":"361","line":584,"column":11,"nodeType":"362","endLine":599,"endColumn":6,"suggestions":"363"},{"ruleId":"360","severity":1,"message":"364","line":601,"column":11,"nodeType":"362","endLine":619,"endColumn":6,"suggestions":"365"},{"ruleId":"360","severity":1,"message":"366","line":621,"column":11,"nodeType":"362","endLine":637,"endColumn":6,"suggestions":"367"},{"ruleId":"360","severity":1,"message":"368","line":639,"column":11,"nodeType":"362","endLine":657,"endColumn":6,"suggestions":"369"},{"ruleId":"360","severity":1,"message":"370","line":659,"column":11,"nodeType":"362","endLine":674,"endColumn":6},{"ruleId":"354","severity":1,"message":"371","line":42,"column":10,"nodeType":"356","messageId":"357","endLine":42,"endColumn":27},{"ruleId":"360","severity":1,"message":"372","line":48,"column":6,"nodeType":"373","endLine":48,"endColumn":8,"suggestions":"374"},{"ruleId":"354","severity":1,"message":"371","line":49,"column":10,"nodeType":"356","messageId":"357","endLine":49,"endColumn":27},{"ruleId":"360","severity":1,"message":"372","line":57,"column":6,"nodeType":"373","endLine":57,"endColumn":8,"suggestions":"375"},{"ruleId":"354","severity":1,"message":"371","line":42,"column":10,"nodeType":"356","messageId":"357","endLine":42,"endColumn":27},{"ruleId":"360","severity":1,"message":"372","line":48,"column":6,"nodeType":"373","endLine":48,"endColumn":8,"suggestions":"376"},{"ruleId":"354","severity":1,"message":"371","line":49,"column":10,"nodeType":"356","messageId":"357","endLine":49,"endColumn":27},{"ruleId":"360","severity":1,"message":"372","line":56,"column":6,"nodeType":"373","endLine":56,"endColumn":8,"suggestions":"377"},{"ruleId":"354","severity":1,"message":"378","line":8,"column":10,"nodeType":"356","messageId":"357","endLine":8,"endColumn":24},{"ruleId":"354","severity":1,"message":"379","line":8,"column":26,"nodeType":"356","messageId":"357","endLine":8,"endColumn":43},{"ruleId":"354","severity":1,"message":"380","line":74,"column":9,"nodeType":"356","messageId":"357","endLine":74,"endColumn":20},{"ruleId":"354","severity":1,"message":"381","line":47,"column":15,"nodeType":"356","messageId":"357","endLine":47,"endColumn":21},{"ruleId":"354","severity":1,"message":"380","line":69,"column":9,"nodeType":"356","messageId":"357","endLine":69,"endColumn":20},{"ruleId":"354","severity":1,"message":"382","line":78,"column":10,"nodeType":"356","messageId":"357","endLine":78,"endColumn":14},{"ruleId":"354","severity":1,"message":"380","line":73,"column":9,"nodeType":"356","messageId":"357","endLine":73,"endColumn":20},{"ruleId":"354","severity":1,"message":"380","line":76,"column":9,"nodeType":"356","messageId":"357","endLine":76,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":18,"column":17,"nodeType":"385","endLine":18,"endColumn":21},{"ruleId":"386","severity":1,"message":"387","line":38,"column":13,"nodeType":"385","endLine":38,"endColumn":46},{"ruleId":"386","severity":1,"message":"387","line":39,"column":13,"nodeType":"385","endLine":39,"endColumn":45},{"ruleId":"386","severity":1,"message":"387","line":40,"column":13,"nodeType":"385","endLine":40,"endColumn":45},{"ruleId":"386","severity":1,"message":"387","line":41,"column":13,"nodeType":"385","endLine":41,"endColumn":43},{"ruleId":"386","severity":1,"message":"387","line":42,"column":13,"nodeType":"385","endLine":42,"endColumn":43},{"ruleId":"386","severity":1,"message":"387","line":43,"column":13,"nodeType":"385","endLine":43,"endColumn":42},{"ruleId":"360","severity":1,"message":"388","line":131,"column":6,"nodeType":"373","endLine":131,"endColumn":8,"suggestions":"389"},{"ruleId":"383","severity":1,"message":"384","line":15,"column":37,"nodeType":"385","endLine":15,"endColumn":68},{"ruleId":"354","severity":1,"message":"381","line":31,"column":15,"nodeType":"356","messageId":"357","endLine":31,"endColumn":21},{"ruleId":"354","severity":1,"message":"381","line":32,"column":15,"nodeType":"356","messageId":"357","endLine":32,"endColumn":21},{"ruleId":"354","severity":1,"message":"381","line":32,"column":15,"nodeType":"356","messageId":"357","endLine":32,"endColumn":21},{"ruleId":"383","severity":1,"message":"384","line":15,"column":37,"nodeType":"385","endLine":15,"endColumn":71},{"ruleId":"383","severity":1,"message":"384","line":23,"column":37,"nodeType":"385","endLine":23,"endColumn":71},{"ruleId":"383","severity":1,"message":"384","line":31,"column":37,"nodeType":"385","endLine":31,"endColumn":71},{"ruleId":"360","severity":1,"message":"388","line":31,"column":6,"nodeType":"373","endLine":31,"endColumn":23,"suggestions":"390"},{"ruleId":"354","severity":1,"message":"391","line":54,"column":9,"nodeType":"356","messageId":"357","endLine":54,"endColumn":19},{"ruleId":"354","severity":1,"message":"392","line":11,"column":9,"nodeType":"356","messageId":"357","endLine":11,"endColumn":17},{"ruleId":"360","severity":1,"message":"393","line":30,"column":6,"nodeType":"373","endLine":30,"endColumn":13,"suggestions":"394"},{"ruleId":"354","severity":1,"message":"391","line":82,"column":9,"nodeType":"356","messageId":"357","endLine":82,"endColumn":19},{"ruleId":"360","severity":1,"message":"395","line":45,"column":6,"nodeType":"373","endLine":45,"endColumn":17,"suggestions":"396"},{"ruleId":"354","severity":1,"message":"391","line":47,"column":9,"nodeType":"356","messageId":"357","endLine":47,"endColumn":19},{"ruleId":"397","severity":1,"message":"398","line":17,"column":30,"nodeType":"399","messageId":"400","endLine":17,"endColumn":32},"no-native-reassign",["401"],"no-negated-in-lhs",["402"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Gbot' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","The 'checkForColumnOfFour' function makes the dependencies of useEffect Hook (at line 786) change on every render. To fix this, wrap the definition of 'checkForColumnOfFour' in its own useCallback() Hook.","VariableDeclarator",["403"],"The 'checkForRowOfFour' function makes the dependencies of useEffect Hook (at line 786) change on every render. To fix this, wrap the definition of 'checkForRowOfFour' in its own useCallback() Hook.",["404"],"The 'checkForColumnOfThree' function makes the dependencies of useEffect Hook (at line 786) change on every render. To fix this, wrap the definition of 'checkForColumnOfThree' in its own useCallback() Hook.",["405"],"The 'checkForRowOfThree' function makes the dependencies of useEffect Hook (at line 786) change on every render. To fix this, wrap the definition of 'checkForRowOfThree' in its own useCallback() Hook.",["406"],"The 'moveIntoSquareBelow' function makes the dependencies of useEffect Hook (at line 786) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'moveIntoSquareBelow' in its own useCallback() Hook.","'QuizButtonVisible' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'shuffledOrder'. Either include it or remove the dependency array.","ArrayExpression",["407"],["408"],["409"],["410"],"'selectedOption' is assigned a value but never used.","'setSelectedOption' is assigned a value but never used.","'resetButton' is assigned a value but never used.","'player' is assigned a value but never used.","'Link' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'questions'. Either include it or remove the dependency array.",["411"],["412"],"'storeScore' is assigned a value but never used.","'gridSize' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'levels'. Either include it or remove the dependency array.",["413"],"React Hook useEffect has a missing dependency: 'handleNewWord'. Either include it or remove the dependency array.",["414"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"423","fix":"425"},{"desc":"423","fix":"426"},{"desc":"423","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},"Wrap the definition of 'checkForColumnOfFour' in its own useCallback() Hook.",{"range":"436","text":"437"},"Wrap the definition of 'checkForRowOfFour' in its own useCallback() Hook.",{"range":"438","text":"439"},"Wrap the definition of 'checkForColumnOfThree' in its own useCallback() Hook.",{"range":"440","text":"441"},"Wrap the definition of 'checkForRowOfThree' in its own useCallback() Hook.",{"range":"442","text":"443"},"Update the dependencies array to be: [shuffledOrder]",{"range":"444","text":"445"},{"range":"446","text":"445"},{"range":"447","text":"445"},{"range":"448","text":"445"},"Update the dependencies array to be: [questions]",{"range":"449","text":"450"},"Update the dependencies array to be: [currentQuestion, questions]",{"range":"451","text":"452"},"Update the dependencies array to be: [level, levels]",{"range":"453","text":"454"},"Update the dependencies array to be: [handleNewWord, wordIndex]",{"range":"455","text":"456"},[21414,22072],"useCallback(() => {\r\n        for (let i = 0; i <= 39; i++) {\r\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    })",[22106,22908],"useCallback(() => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    })",[22946,23609],"useCallback(() => {\r\n        for (let i = 0; i <= 47; i++) {\r\n            const columnOfThree = [i, i + width, i + width * 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              } \r\n              return false;\r\n              \r\n            }\r\n        }\r\n    })",[23644,24411],"useCallback(() => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfThree = [i, i + 1, i + 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    })",[1961,1963],"[shuffledOrder]",[2456,2458],[1963,1965],[2470,2472],[6501,6503],"[questions]",[1182,1199],"[currentQuestion, questions]",[1076,1083],"[level, levels]",[1575,1586],"[handleNewWord, wordIndex]"]