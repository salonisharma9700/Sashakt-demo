{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salon\\\\OneDrive\\\\Documents\\\\sashakt\\\\src\\\\Games\\\\cgam\\\\cgam.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import ScoreBoard from './ScoreBoard'\n// import blueCandy from './cgamimg/blueCandy.png'\n// import greenCandy from './cgamimg/greenCandy.png'\n// import orangeCandy from './cgamimg/orangeCandy.png'\n// import purpleCandy from './cgamimg/purpleCandy.png'\n// import redCandy from './cgamimg/redCandy.png'\n// import yellowCandy from './cgamimg/yellowCandy.png'\n// import blank from './cgamimg/blank.png'\n// import \"./cgam.css\"\n// const PopUp = ({ message, onClose }) => (\n//     <div className=\"popup\">\n//       <div className=\"popup-content\">\n//         <p>{message}</p>\n\n//         <button onClick={onClose}>Close</button>\n//       </div>\n//     </div>\n//   );\n// const width = 8;\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\n// const Gameapp = () => {\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [showPopUp, setShowPopUp] = useState(false);\n//   const [level, setLevel] = useState(1);\n//   const [popUpMessage, setPopUpMessage] = useState(\"\");\n// //   const [showPopUp, setShowPopUp] = useState(false);\n//   const [showLevelUp, setShowLevelUp] = useState(false);\n//   const [showQuiz, setShowQuiz] = useState(false);\n//   const [quizQuestions, setQuizQuestions] = useState([\n//     // Add your quiz questions here\n//   ]);\n//   const [currentQuestions, setCurrentQuestions] = useState([]);\n//   const [quizCompleted, setQuizCompleted] = useState(false);\n\n//   const checkForColumnOfFour = () => {\n//     for (let i = 0; i <= 39; i++) {\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForRowOfFour = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForColumnOfThree = () => {\n//     for (let i = 0; i <= 47; i++) {\n//       const columnOfThree = [i, i + width, i + width * 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         } else {\n//           return false;\n//         }\n//       }\n//     }\n//   };\n\n// const checkForRowOfThree = () => {\n//   for (let i = 0; i < 64; i++) {\n//     const rowOfThree = [i, i + 1, i + 2];\n//     const decidedColor = currentColorArrangement[i];\n//     const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n//     const isBlank = currentColorArrangement[i] === blank;\n\n//     if (notValid.includes(i)) continue;\n\n//     if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//       if (gameStarted) {\n//         setScoreDisplay((score) => score + 1);\n//         rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//         return true;\n//       }\n//       return false;\n//     }\n//   }\n// };\n\n//   const moveIntoSquareBelow = () => {\n//     for (let i = 0; i <= 55; i++) {\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n//       const isFirstRow = firstRow.includes(i);\n\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\n//         currentColorArrangement[i] = candyColors[randomNumber];\n//       }\n\n//       if (currentColorArrangement[i + width] === blank) {\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\n//         currentColorArrangement[i] = blank;\n//       }\n//     }\n//   };\n\n//   const dragStart = (e) => {\n//     setGameStarted(true);\n//     setSquareBeingDragged(e.target);\n//   };\n\n//   const dragDrop = (e) => {\n//     setSquareBeingReplaced(e.target);\n//   };\n\n//   const dragEnd = () => {\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n\n//     const validMoves = [\n//       squareBeingDraggedId - 1,\n//       squareBeingDraggedId - width,\n//       squareBeingDraggedId + 1,\n//       squareBeingDraggedId + width,\n//     ];\n\n//     const validMove = validMoves.includes(squareBeingReplacedId);\n\n//     if (gameStarted) {\n//       const isAColumnOfFour = checkForColumnOfFour();\n//       const isARowOfFour = checkForRowOfFour();\n//       const isAColumnOfThree = checkForColumnOfThree();\n//       const isARowOfThree = checkForRowOfThree();\n\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n//         setSquareBeingDragged(null);\n//         setSquareBeingReplaced(null);\n//       } else {\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n//         setCurrentColorArrangement([...currentColorArrangement]);\n//       }\n//     }\n//   };\n\n//   const createBoard = () => {\n//     const randomColorArrangement = [];\n//     for (let i = 0; i < width * width; i++) {\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n//       randomColorArrangement.push(randomColor);\n//     }\n//     setCurrentColorArrangement(randomColorArrangement);\n//   };\n\n//   useEffect(() => {\n//     createBoard();\n//   }, []);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       checkForColumnOfFour();\n//       checkForRowOfFour();\n//       checkForColumnOfThree();\n//       checkForRowOfThree();\n//       moveIntoSquareBelow();\n//       setCurrentColorArrangement([...currentColorArrangement]);\n\n//       if ((scoreDisplay + 1) % 5 === 0 && !quizCompleted) {\n//         setLevel((prevLevel) => prevLevel + 1);\n//         setQuizCompleted(false);\n\n//         if (quizQuestions.length > 0) {\n//           const shuffledQuestions = shuffleArray(quizQuestions);\n//           const questionsForLevel = shuffledQuestions.splice(0, 2);\n//           setCurrentQuestions(questionsForLevel);\n//           setShowLevelUp(true);\n//           setShowQuiz(true);\n//         }\n//       }\n//     }, 100);\n\n//     return () => clearInterval(timer);\n//   }, [\n//     checkForColumnOfFour,\n//     checkForRowOfFour,\n//     checkForColumnOfThree,\n//     checkForRowOfThree,\n//     moveIntoSquareBelow,\n//     currentColorArrangement,\n//     gameStarted,\n//     scoreDisplay,\n//     quizCompleted,\n//     quizQuestions,\n//   ]);\n\n//   const startQuiz = () => {\n//     setShowQuiz(true);\n//   };\n\n//   const closeLevelUp = () => {\n//     const selectedAnswers = Array.from(document.querySelectorAll('input[type=\"radio\"]:checked')).map((input) => input.value);\n\n//     if (selectedAnswers.length === currentQuestions.length) {\n//       const allCorrect = currentQuestions.every((question, index) => question.correctAnswer === selectedAnswers[index]);\n\n//       if (allCorrect) {\n//         // Show badge or other level-up rewards\n//         setPopUpMessage(\"Congratulations! You cleared a Level!\");\n//         setShowPopUp(true);\n//       } else {\n//         setPopUpMessage(\"Oops! Some answers are incorrect. Please try again or rewatch videos and attempt again.\");\n//         setShowPopUp(true);\n//         setQuizCompleted(false);\n//         setQuizQuestions([]);\n//         return;\n//       }\n//     } else {\n//       setPopUpMessage(\"Please answer all questions before submitting.\");\n//       setShowPopUp(true);\n//       return;\n//     }\n\n//     setShowLevelUp(false);\n//     setShowQuiz(false);\n//   };\n\n//   const handleAnswer = (questionIndex, selectedOption) => {\n//     const currentQuestion = currentQuestions[questionIndex];\n\n//     if (selectedOption === currentQuestion.correctAnswer) {\n//       console.log(\"Correct!\");\n//     } else {\n//       console.log(\"Incorrect!\");\n//     }\n\n//     const allCorrect = currentQuestions.every((question) => question.correctAnswer === selectedOption);\n\n//     setQuizCompleted(allCorrect);\n//   };\n\n//   const shuffleArray = (array) => {\n//     for (let i = array.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [array[i], array[j]] = [array[j], array[i]];\n//     }\n//     return array;\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"game\">\n//         {currentColorArrangement.map((candyColor, index) => (\n//           <img\n//             key={index}\n//             src={candyColor}\n//             alt={`candy_${index}`}\n//             onDragStart={dragStart}\n//             onDragOver={(e) => e.preventDefault()}\n//             onDragEnter={(e) => e.preventDefault()}\n//             onDragLeave={(e) => e.preventDefault()}\n//             onDrop={dragDrop}\n//             onDragEnd={dragEnd}\n//           />\n//         ))}\n//       </div>\n//       <div className=\"sb\">\n//         <ScoreBoard score={scoreDisplay} />\n//       </div>\n\n//       {showLevelUp && (\n//         <div className=\"level-up-popup\">\n//           {/* Add level-up popup content here */}\n//           <button onClick={startQuiz}>Start Quiz</button>\n//         </div>\n//       )}\n\n//       {showQuiz && (\n//         <div className=\"quiz-popup\">\n//           {/* Add quiz content here */}\n//           {currentQuestions.map((question, index) => (\n//             <div key={index}>\n//               <p>{question.question}</p>\n//               {question.options.map((option, optionIndex) => (\n//                 <div key={optionIndex}>\n//                   <input\n//                     type=\"radio\"\n//                     name={`question_${index}`}\n//                     value={option}\n//                     onChange={() => handleAnswer(index, option)}\n//                   />\n//                   <label>{option}</label>\n//                 </div>\n//               ))}\n//             </div>\n//           ))}\n//           <button onClick={closeLevelUp}>Submit Answers</button>\n//         </div>\n//       )}\n\n//       <div className=\"popup\">\n//         {showPopUp && <PopUp message={popUpMessage} onClose={() => setShowPopUp(false)} />}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Gameapp;\n\n// import React, { useEffect, useState } from 'react';\n// import ScoreBoard from './ScoreBoard';\n// import blueCandy from './cgamimg/blueCandy.png';\n// import greenCandy from './cgamimg/greenCandy.png';\n// import orangeCandy from './cgamimg/orangeCandy.png';\n// import purpleCandy from './cgamimg/purpleCandy.png';\n// import redCandy from './cgamimg/redCandy.png';\n// import yellowCandy from './cgamimg/yellowCandy.png';\n// import blank from './cgamimg/blank.png';\n// import './cgam.css';\n\n// const width = 8;\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\n// const Gameapp = () => {\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\n//   const [gameStarted, setGameStarted] = useState(false);\n\n//   const checkForColumnOfFour = () => {\n//     for (let i = 0; i <= 39; i++) {\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForRowOfFour = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForColumnOfThree = () => {\n//     for (let i = 0; i <= 47; i++) {\n//       const columnOfThree = [i, i + width, i + width * 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         } else {\n//           return false;\n//         }\n//       }\n//     }\n//   };\n\n//   const checkForRowOfThree = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfThree = [i, i + 1, i + 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const moveIntoSquareBelow = () => {\n//     for (let i = 0; i <= 55; i++) {\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n//       const isFirstRow = firstRow.includes(i);\n\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\n//         currentColorArrangement[i] = candyColors[randomNumber];\n//       }\n\n//       if (currentColorArrangement[i + width] === blank) {\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\n//         currentColorArrangement[i] = blank;\n//       }\n//     }\n//   };\n\n//   const dragStart = (e) => {\n//     setGameStarted(true);\n//     setSquareBeingDragged(e.target);\n//   };\n\n//   const dragDrop = (e) => {\n//     setSquareBeingReplaced(e.target);\n//   };\n\n//   const dragEnd = () => {\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n\n//     const validMoves = [\n//       squareBeingDraggedId - 1,\n//       squareBeingDraggedId - width,\n//       squareBeingDraggedId + 1,\n//       squareBeingDraggedId + width,\n//     ];\n\n//     const validMove = validMoves.includes(squareBeingReplacedId);\n\n//     if (gameStarted) {\n//       const isAColumnOfFour = checkForColumnOfFour();\n//       const isARowOfFour = checkForRowOfFour();\n//       const isAColumnOfThree = checkForColumnOfThree();\n//       const isARowOfThree = checkForRowOfThree();\n\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n//         setSquareBeingDragged(null);\n//         setSquareBeingReplaced(null);\n//       } else {\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n//         setCurrentColorArrangement([...currentColorArrangement]);\n//       }\n//     }\n//   };\n\n//   const createBoard = () => {\n//     const randomColorArrangement = [];\n//     for (let i = 0; i < width * width; i++) {\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n//       randomColorArrangement.push(randomColor);\n//     }\n//     setCurrentColorArrangement(randomColorArrangement);\n//   };\n\n//   useEffect(() => {\n//     createBoard();\n//   }, []);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       checkForColumnOfFour();\n//       checkForRowOfFour();\n//       checkForColumnOfThree();\n//       checkForRowOfThree();\n//       moveIntoSquareBelow();\n//       setCurrentColorArrangement([...currentColorArrangement]);\n//     }, 100);\n\n//     return () => clearInterval(timer);\n//   }, [\n//     checkForColumnOfFour,\n//     checkForRowOfFour,\n//     checkForColumnOfThree,\n//     checkForRowOfThree,\n//     moveIntoSquareBelow,\n//     currentColorArrangement,\n//   ]);\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"game\">\n//         {currentColorArrangement.map((candyColor, index) => (\n//           <img\n//             key={index}\n//             src={candyColor}\n//             alt={`candy_${index}`}\n//             onDragStart={dragStart}\n//             onDragOver={(e) => e.preventDefault()}\n//             onDragEnter={(e) => e.preventDefault()}\n//             onDragLeave={(e) => e.preventDefault()}\n//             onDrop={dragDrop}\n//             onDragEnd={dragEnd}\n//           />\n//         ))}\n//       </div>\n//       <div className=\"sb\">\n//         <ScoreBoard score={scoreDisplay} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Gameapp;\n\nimport React, { useEffect, useState } from 'react';\nimport ScoreBoard from './ScoreBoard';\nimport blueCandy from './cgamimg/blueCandy.png';\nimport greenCandy from './cgamimg/greenCandy.png';\nimport orangeCandy from './cgamimg/orangeCandy.png';\nimport purpleCandy from './cgamimg/purpleCandy.png';\nimport redCandy from './cgamimg/redCandy.png';\nimport yellowCandy from './cgamimg/yellowCandy.png';\nimport blank from './cgamimg/blank.png';\nimport './cgam.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\nconst Gameapp = () => {\n  _s();\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showDidYouKnowModal, setShowDidYouKnowModal] = useState(false);\n  const [currentDidYouKnowContent, setCurrentDidYouKnowContent] = useState('');\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        if (gameStarted) {\n          setScoreDisplay(score => score + 2);\n          columnOfFour.forEach(square => currentColorArrangement[square] = blank);\n          return true;\n        }\n        return false;\n      }\n    }\n  };\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        if (gameStarted) {\n          setScoreDisplay(score => score + 2);\n          rowOfFour.forEach(square => currentColorArrangement[square] = blank);\n          return true;\n        }\n        return false;\n      }\n    }\n  };\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        if (gameStarted) {\n          setScoreDisplay(score => score + 1);\n          columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n          return true;\n        }\n        return false;\n      }\n    }\n  };\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        if (gameStarted) {\n          setScoreDisplay(score => score + 1);\n          rowOfThree.forEach(square => currentColorArrangement[square] = blank);\n          return true;\n        }\n        return false;\n      }\n    }\n  };\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n  const dragStart = e => {\n    setGameStarted(true);\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = e => {\n    setSquareBeingReplaced(e.target);\n  };\n  // const dragEnd = () => {\n  //     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n  //     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n  //     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n  //     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n  //     const validMoves = [\n  //         squareBeingDraggedId - 1,\n  //         squareBeingDraggedId - width,\n  //         squareBeingDraggedId + 1,\n  //         squareBeingDraggedId + width\n  //     ]\n\n  //     const validMove = validMoves.includes(squareBeingReplacedId)\n  //     if (gameStarted) {\n  //       const isAColumnOfFour = checkForColumnOfFour();\n  //       const isARowOfFour = checkForRowOfFour();\n  //       const isAColumnOfThree = checkForColumnOfThree();\n  //       const isARowOfThree = checkForRowOfThree();\n\n  //       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n  //         setSquareBeingDragged(null);\n  //         setSquareBeingReplaced(null);\n  //       } else {\n  //         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n  //         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n  //         setCurrentColorArrangement([...currentColorArrangement]);\n  //       }\n  //     }\n  //   };\n\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - width, squareBeingDraggedId + 1, squareBeingDraggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    if (gameStarted && squareBeingReplacedId && validMove) {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n      currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n      const isAColumnOfFour = checkForColumnOfFour();\n      const isARowOfFour = checkForRowOfFour();\n      const isAColumnOfThree = checkForColumnOfThree();\n      const isARowOfThree = checkForRowOfThree();\n      if (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree) {\n        setScoreDisplay(prevScore => prevScore + 2);\n      } else {\n        setScoreDisplay(prevScore => prevScore + 1); // Increment score for a valid move without a match\n      }\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n      setCurrentColorArrangement([...currentColorArrangement]);\n    } else {\n      setCurrentColorArrangement(prevArrangement => [...prevArrangement]); // Revert the changes\n    }\n  };\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  // useEffect(() => {\n  //     const timer = setInterval(() => {\n  //         checkForColumnOfFour()\n  //         checkForRowOfFour()\n  //         checkForColumnOfThree()\n  //         checkForRowOfThree()\n  //         moveIntoSquareBelow()\n  //         setCurrentColorArrangement([...currentColorArrangement])\n  //     }, 100)\n  //     return () => clearInterval(timer)\n  // }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement(prevArrangement => [...prevArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, setCurrentColorArrangement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColor,\n        alt: candyColor,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sb\",\n      children: /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        score: scoreDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 815,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 797,\n    columnNumber: 9\n  }, this);\n};\n_s(Gameapp, \"EOrF1/iSEn5pwmt9xAt9JOgPzp4=\");\n_c = Gameapp;\nexport default Gameapp;\nvar _c;\n$RefreshReg$(_c, \"Gameapp\");","map":{"version":3,"names":["React","useEffect","useState","ScoreBoard","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","jsxDEV","_jsxDEV","width","candyColors","Gameapp","_s","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","gameStarted","setGameStarted","showDidYouKnowModal","setShowDidYouKnowModal","currentDidYouKnowContent","setCurrentDidYouKnowContent","checkForColumnOfFour","i","columnOfFour","decidedColor","isBlank","every","square","score","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","prevScore","prevArrangement","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","className","children","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/salon/OneDrive/Documents/sashakt/src/Games/cgam/cgam.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard'\r\n// import blueCandy from './cgamimg/blueCandy.png'\r\n// import greenCandy from './cgamimg/greenCandy.png'\r\n// import orangeCandy from './cgamimg/orangeCandy.png'\r\n// import purpleCandy from './cgamimg/purpleCandy.png'\r\n// import redCandy from './cgamimg/redCandy.png'\r\n// import yellowCandy from './cgamimg/yellowCandy.png'\r\n// import blank from './cgamimg/blank.png'\r\n// import \"./cgam.css\"\r\n// const PopUp = ({ message, onClose }) => (\r\n//     <div className=\"popup\">\r\n//       <div className=\"popup-content\">\r\n//         <p>{message}</p>\r\n        \r\n//         <button onClick={onClose}>Close</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [level, setLevel] = useState(1);\r\n//   const [popUpMessage, setPopUpMessage] = useState(\"\");\r\n// //   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [showLevelUp, setShowLevelUp] = useState(false);\r\n//   const [showQuiz, setShowQuiz] = useState(false);\r\n//   const [quizQuestions, setQuizQuestions] = useState([\r\n//     // Add your quiz questions here\r\n//   ]);\r\n//   const [currentQuestions, setCurrentQuestions] = useState([]);\r\n//   const [quizCompleted, setQuizCompleted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n  // const checkForRowOfThree = () => {\r\n  //   for (let i = 0; i < 64; i++) {\r\n  //     const rowOfThree = [i, i + 1, i + 2];\r\n  //     const decidedColor = currentColorArrangement[i];\r\n  //     const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n  //     const isBlank = currentColorArrangement[i] === blank;\r\n\r\n  //     if (notValid.includes(i)) continue;\r\n\r\n  //     if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n  //       if (gameStarted) {\r\n  //         setScoreDisplay((score) => score + 1);\r\n  //         rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n  //         return true;\r\n  //       }\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n\r\n//       if ((scoreDisplay + 1) % 5 === 0 && !quizCompleted) {\r\n//         setLevel((prevLevel) => prevLevel + 1);\r\n//         setQuizCompleted(false);\r\n\r\n//         if (quizQuestions.length > 0) {\r\n//           const shuffledQuestions = shuffleArray(quizQuestions);\r\n//           const questionsForLevel = shuffledQuestions.splice(0, 2);\r\n//           setCurrentQuestions(questionsForLevel);\r\n//           setShowLevelUp(true);\r\n//           setShowQuiz(true);\r\n//         }\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//     gameStarted,\r\n//     scoreDisplay,\r\n//     quizCompleted,\r\n//     quizQuestions,\r\n//   ]);\r\n\r\n//   const startQuiz = () => {\r\n//     setShowQuiz(true);\r\n//   };\r\n\r\n//   const closeLevelUp = () => {\r\n//     const selectedAnswers = Array.from(document.querySelectorAll('input[type=\"radio\"]:checked')).map((input) => input.value);\r\n\r\n//     if (selectedAnswers.length === currentQuestions.length) {\r\n//       const allCorrect = currentQuestions.every((question, index) => question.correctAnswer === selectedAnswers[index]);\r\n\r\n//       if (allCorrect) {\r\n//         // Show badge or other level-up rewards\r\n//         setPopUpMessage(\"Congratulations! You cleared a Level!\");\r\n//         setShowPopUp(true);\r\n//       } else {\r\n//         setPopUpMessage(\"Oops! Some answers are incorrect. Please try again or rewatch videos and attempt again.\");\r\n//         setShowPopUp(true);\r\n//         setQuizCompleted(false);\r\n//         setQuizQuestions([]);\r\n//         return;\r\n//       }\r\n//     } else {\r\n//       setPopUpMessage(\"Please answer all questions before submitting.\");\r\n//       setShowPopUp(true);\r\n//       return;\r\n//     }\r\n\r\n//     setShowLevelUp(false);\r\n//     setShowQuiz(false);\r\n//   };\r\n\r\n//   const handleAnswer = (questionIndex, selectedOption) => {\r\n//     const currentQuestion = currentQuestions[questionIndex];\r\n\r\n//     if (selectedOption === currentQuestion.correctAnswer) {\r\n//       console.log(\"Correct!\");\r\n//     } else {\r\n//       console.log(\"Incorrect!\");\r\n//     }\r\n\r\n//     const allCorrect = currentQuestions.every((question) => question.correctAnswer === selectedOption);\r\n\r\n//     setQuizCompleted(allCorrect);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     for (let i = array.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [array[i], array[j]] = [array[j], array[i]];\r\n//     }\r\n//     return array;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n\r\n//       {showLevelUp && (\r\n//         <div className=\"level-up-popup\">\r\n//           {/* Add level-up popup content here */}\r\n//           <button onClick={startQuiz}>Start Quiz</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showQuiz && (\r\n//         <div className=\"quiz-popup\">\r\n//           {/* Add quiz content here */}\r\n//           {currentQuestions.map((question, index) => (\r\n//             <div key={index}>\r\n//               <p>{question.question}</p>\r\n//               {question.options.map((option, optionIndex) => (\r\n//                 <div key={optionIndex}>\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question_${index}`}\r\n//                     value={option}\r\n//                     onChange={() => handleAnswer(index, option)}\r\n//                   />\r\n//                   <label>{option}</label>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ))}\r\n//           <button onClick={closeLevelUp}>Submit Answers</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"popup\">\r\n//         {showPopUp && <PopUp message={popUpMessage} onClose={() => setShowPopUp(false)} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard';\r\n// import blueCandy from './cgamimg/blueCandy.png';\r\n// import greenCandy from './cgamimg/greenCandy.png';\r\n// import orangeCandy from './cgamimg/orangeCandy.png';\r\n// import purpleCandy from './cgamimg/purpleCandy.png';\r\n// import redCandy from './cgamimg/redCandy.png';\r\n// import yellowCandy from './cgamimg/yellowCandy.png';\r\n// import blank from './cgamimg/blank.png';\r\n// import './cgam.css';\r\n\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfThree = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfThree = [i, i + 1, i + 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//   ]);\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport ScoreBoard from './ScoreBoard';\r\nimport blueCandy from './cgamimg/blueCandy.png';\r\nimport greenCandy from './cgamimg/greenCandy.png';\r\nimport orangeCandy from './cgamimg/orangeCandy.png';\r\nimport purpleCandy from './cgamimg/purpleCandy.png';\r\nimport redCandy from './cgamimg/redCandy.png';\r\nimport yellowCandy from './cgamimg/yellowCandy.png';\r\nimport blank from './cgamimg/blank.png';\r\nimport './cgam.css';\r\n\r\nconst width = 8\r\nconst candyColors = [\r\n    blueCandy,\r\n    orangeCandy,\r\n    purpleCandy,\r\n    redCandy,\r\n    yellowCandy,\r\n    greenCandy\r\n]\r\n\r\nconst Gameapp = () => {\r\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\r\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\r\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\r\n    const [scoreDisplay, setScoreDisplay] = useState(0)\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [showDidYouKnowModal, setShowDidYouKnowModal] = useState(false);\r\n    const [currentDidYouKnowContent, setCurrentDidYouKnowContent] = useState('');\r\n\r\n\r\n    const checkForColumnOfFour = () => {\r\n        for (let i = 0; i <= 39; i++) {\r\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfFour = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 2);\r\n                rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForColumnOfThree = () => {\r\n        for (let i = 0; i <= 47; i++) {\r\n            const columnOfThree = [i, i + width, i + width * 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              } \r\n              return false;\r\n              \r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfThree = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfThree = [i, i + 1, i + 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n              if (gameStarted) {\r\n                setScoreDisplay((score) => score + 1);\r\n                rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n                return true;\r\n              }\r\n              return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    const moveIntoSquareBelow = () => {\r\n        for (let i = 0; i <= 55; i++) {\r\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\r\n            const isFirstRow = firstRow.includes(i)\r\n\r\n            if (isFirstRow && currentColorArrangement[i] === blank) {\r\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\r\n                currentColorArrangement[i] = candyColors[randomNumber]\r\n            }\r\n\r\n            if ((currentColorArrangement[i + width]) === blank) {\r\n                currentColorArrangement[i + width] = currentColorArrangement[i]\r\n                currentColorArrangement[i] = blank\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragStart = (e) => {\r\n        setGameStarted(true);\r\n        setSquareBeingDragged(e.target)\r\n    }\r\n    const dragDrop = (e) => {\r\n        setSquareBeingReplaced(e.target)\r\n    }\r\n    // const dragEnd = () => {\r\n    //     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\r\n    //     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\r\n\r\n    //     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\r\n    //     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\r\n\r\n    //     const validMoves = [\r\n    //         squareBeingDraggedId - 1,\r\n    //         squareBeingDraggedId - width,\r\n    //         squareBeingDraggedId + 1,\r\n    //         squareBeingDraggedId + width\r\n    //     ]\r\n\r\n    //     const validMove = validMoves.includes(squareBeingReplacedId)\r\n    //     if (gameStarted) {\r\n    //       const isAColumnOfFour = checkForColumnOfFour();\r\n    //       const isARowOfFour = checkForRowOfFour();\r\n    //       const isAColumnOfThree = checkForColumnOfThree();\r\n    //       const isARowOfThree = checkForRowOfThree();\r\n    \r\n    //       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n    //         setSquareBeingDragged(null);\r\n    //         setSquareBeingReplaced(null);\r\n    //       } else {\r\n    //         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n    //         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n    //         setCurrentColorArrangement([...currentColorArrangement]);\r\n    //       }\r\n    //     }\r\n    //   };\r\n    \r\n    const dragEnd = () => {\r\n      const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n      const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n  \r\n      const validMoves = [\r\n          squareBeingDraggedId - 1,\r\n          squareBeingDraggedId - width,\r\n          squareBeingDraggedId + 1,\r\n          squareBeingDraggedId + width\r\n      ];\r\n  \r\n      const validMove = validMoves.includes(squareBeingReplacedId);\r\n  \r\n      if (gameStarted && squareBeingReplacedId && validMove) {\r\n          currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n          currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n  \r\n          const isAColumnOfFour = checkForColumnOfFour();\r\n          const isARowOfFour = checkForRowOfFour();\r\n          const isAColumnOfThree = checkForColumnOfThree();\r\n          const isARowOfThree = checkForRowOfThree();\r\n  \r\n          if (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree) {\r\n              setScoreDisplay(prevScore => prevScore + 2);\r\n          } else {\r\n              setScoreDisplay(prevScore => prevScore + 1); // Increment score for a valid move without a match\r\n          }\r\n  \r\n          setSquareBeingDragged(null);\r\n          setSquareBeingReplaced(null);\r\n          setCurrentColorArrangement([...currentColorArrangement]);\r\n      } else {\r\n          setCurrentColorArrangement(prevArrangement => [...prevArrangement]); // Revert the changes\r\n      }\r\n  };\r\n  \r\n    const createBoard = () => {\r\n        const randomColorArrangement = []\r\n        for (let i = 0; i < width * width; i++) {\r\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\r\n            randomColorArrangement.push(randomColor)\r\n        }\r\n        setCurrentColorArrangement(randomColorArrangement);\r\n    };\r\n\r\n    useEffect(() => {\r\n        createBoard()\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         checkForColumnOfFour()\r\n    //         checkForRowOfFour()\r\n    //         checkForColumnOfThree()\r\n    //         checkForRowOfThree()\r\n    //         moveIntoSquareBelow()\r\n    //         setCurrentColorArrangement([...currentColorArrangement])\r\n    //     }, 100)\r\n    //     return () => clearInterval(timer)\r\n    // }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\r\n\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n          checkForColumnOfFour();\r\n          checkForRowOfFour();\r\n          checkForColumnOfThree();\r\n          checkForRowOfThree();\r\n          moveIntoSquareBelow();\r\n          setCurrentColorArrangement((prevArrangement) => [...prevArrangement]);\r\n      }, 100);\r\n      return () => clearInterval(timer);\r\n  }, [\r\n      checkForColumnOfFour,\r\n      checkForRowOfFour,\r\n      checkForColumnOfThree,\r\n      checkForRowOfThree,\r\n      moveIntoSquareBelow,\r\n      setCurrentColorArrangement,\r\n  ]);\r\n  \r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"game\">\r\n                {currentColorArrangement.map((candyColor, index) => (\r\n                    <img\r\n                        key={index}\r\n                        src={candyColor}\r\n                        alt={candyColor}\r\n                        data-id={index}\r\n                        draggable={true}\r\n                        onDragStart={dragStart}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                        onDragEnter={(e) => e.preventDefault()}\r\n                        onDragLeave={(e) => e.preventDefault()}\r\n                        onDrop={dragDrop}\r\n                        onDragEnd={dragEnd}\r\n                    />\r\n                ))}\r\n            </div>\r\n           <div className='sb'>\r\n            <ScoreBoard score={scoreDisplay}/>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gameapp;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,KAAK,GAAG,CAAC;AACf,MAAMC,WAAW,GAAG,CAChBV,SAAS,EACTE,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXJ,UAAU,CACb;AAED,MAAMU,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1E,MAAM,CAACiB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACyB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAAC2B,wBAAwB,EAAEC,2BAA2B,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAG5E,MAAM6B,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,YAAY,GAAG,CAACD,CAAC,EAAEA,CAAC,GAAGnB,KAAK,EAAEmB,CAAC,GAAGnB,KAAK,GAAG,CAAC,EAAEmB,CAAC,GAAGnB,KAAK,GAAG,CAAC,CAAC;MACjE,MAAMqB,YAAY,GAAGjB,uBAAuB,CAACe,CAAC,CAAC;MAC/C,MAAMG,OAAO,GAAGlB,uBAAuB,CAACe,CAAC,CAAC,KAAKtB,KAAK;MAEpD,IAAIuB,YAAY,CAACG,KAAK,CAACC,MAAM,IAAIpB,uBAAuB,CAACoB,MAAM,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;QAC9F,IAAIV,WAAW,EAAE;UACfD,eAAe,CAAEc,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;UACrCL,YAAY,CAACM,OAAO,CAACF,MAAM,IAAKpB,uBAAuB,CAACoB,MAAM,CAAC,GAAG3B,KAAM,CAAC;UACzE,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd;IACJ;EACJ,CAAC;EAED,MAAM8B,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzB,MAAMS,SAAS,GAAG,CAACT,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MAC1C,MAAME,YAAY,GAAGjB,uBAAuB,CAACe,CAAC,CAAC;MAC/C,MAAMU,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAC9G,MAAMP,OAAO,GAAGlB,uBAAuB,CAACe,CAAC,CAAC,KAAKtB,KAAK;MAEpD,IAAIgC,QAAQ,CAACC,QAAQ,CAACX,CAAC,CAAC,EAAE;MAE1B,IAAIS,SAAS,CAACL,KAAK,CAACC,MAAM,IAAIpB,uBAAuB,CAACoB,MAAM,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;QAC3F,IAAIV,WAAW,EAAE;UACfD,eAAe,CAAEc,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;UACrCG,SAAS,CAACF,OAAO,CAACF,MAAM,IAAKpB,uBAAuB,CAACoB,MAAM,CAAC,GAAG3B,KAAM,CAAC;UACtE,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd;IACJ;EACJ,CAAC;EAED,MAAMkC,qBAAqB,GAAGA,CAAA,KAAM;IAChC,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMa,aAAa,GAAG,CAACb,CAAC,EAAEA,CAAC,GAAGnB,KAAK,EAAEmB,CAAC,GAAGnB,KAAK,GAAG,CAAC,CAAC;MACnD,MAAMqB,YAAY,GAAGjB,uBAAuB,CAACe,CAAC,CAAC;MAC/C,MAAMG,OAAO,GAAGlB,uBAAuB,CAACe,CAAC,CAAC,KAAKtB,KAAK;MAEpD,IAAImC,aAAa,CAACT,KAAK,CAACC,MAAM,IAAIpB,uBAAuB,CAACoB,MAAM,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;QAC/F,IAAIV,WAAW,EAAE;UACfD,eAAe,CAAEc,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;UACrCO,aAAa,CAACN,OAAO,CAACF,MAAM,IAAKpB,uBAAuB,CAACoB,MAAM,CAAC,GAAG3B,KAAM,CAAC;UAC1E,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MAEd;IACJ;EACJ,CAAC;EAED,MAAMoC,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzB,MAAMe,UAAU,GAAG,CAACf,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MACpC,MAAME,YAAY,GAAGjB,uBAAuB,CAACe,CAAC,CAAC;MAC/C,MAAMU,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAC/E,MAAMP,OAAO,GAAGlB,uBAAuB,CAACe,CAAC,CAAC,KAAKtB,KAAK;MAEpD,IAAIgC,QAAQ,CAACC,QAAQ,CAACX,CAAC,CAAC,EAAE;MAE1B,IAAIe,UAAU,CAACX,KAAK,CAACC,MAAM,IAAIpB,uBAAuB,CAACoB,MAAM,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;QAC5F,IAAIV,WAAW,EAAE;UACfD,eAAe,CAAEc,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;UACrCS,UAAU,CAACR,OAAO,CAACF,MAAM,IAAKpB,uBAAuB,CAACoB,MAAM,CAAC,GAAG3B,KAAM,CAAC;UACvE,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd;IACJ;EACJ,CAAC;EAED,MAAMsC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMiB,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzC,MAAMC,UAAU,GAAGD,QAAQ,CAACN,QAAQ,CAACX,CAAC,CAAC;MAEvC,IAAIkB,UAAU,IAAIjC,uBAAuB,CAACe,CAAC,CAAC,KAAKtB,KAAK,EAAE;QACpD,IAAIyC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxC,WAAW,CAACyC,MAAM,CAAC;QACjEtC,uBAAuB,CAACe,CAAC,CAAC,GAAGlB,WAAW,CAACqC,YAAY,CAAC;MAC1D;MAEA,IAAKlC,uBAAuB,CAACe,CAAC,GAAGnB,KAAK,CAAC,KAAMH,KAAK,EAAE;QAChDO,uBAAuB,CAACe,CAAC,GAAGnB,KAAK,CAAC,GAAGI,uBAAuB,CAACe,CAAC,CAAC;QAC/Df,uBAAuB,CAACe,CAAC,CAAC,GAAGtB,KAAK;MACtC;IACJ;EACJ,CAAC;EAED,MAAM8C,SAAS,GAAIC,CAAC,IAAK;IACrB/B,cAAc,CAAC,IAAI,CAAC;IACpBN,qBAAqB,CAACqC,CAAC,CAACC,MAAM,CAAC;EACnC,CAAC;EACD,MAAMC,QAAQ,GAAIF,CAAC,IAAK;IACpBnC,sBAAsB,CAACmC,CAAC,CAACC,MAAM,CAAC;EACpC,CAAC;EACD;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,oBAAoB,GAAGC,QAAQ,CAAC3C,kBAAkB,CAAC4C,YAAY,CAAC,SAAS,CAAC,CAAC;IACjF,MAAMC,qBAAqB,GAAGF,QAAQ,CAACzC,mBAAmB,CAAC0C,YAAY,CAAC,SAAS,CAAC,CAAC;IAEnF,MAAME,UAAU,GAAG,CACfJ,oBAAoB,GAAG,CAAC,EACxBA,oBAAoB,GAAGhD,KAAK,EAC5BgD,oBAAoB,GAAG,CAAC,EACxBA,oBAAoB,GAAGhD,KAAK,CAC/B;IAED,MAAMqD,SAAS,GAAGD,UAAU,CAACtB,QAAQ,CAACqB,qBAAqB,CAAC;IAE5D,IAAIvC,WAAW,IAAIuC,qBAAqB,IAAIE,SAAS,EAAE;MACnDjD,uBAAuB,CAAC+C,qBAAqB,CAAC,GAAG7C,kBAAkB,CAAC4C,YAAY,CAAC,KAAK,CAAC;MACvF9C,uBAAuB,CAAC4C,oBAAoB,CAAC,GAAGxC,mBAAmB,CAAC0C,YAAY,CAAC,KAAK,CAAC;MAEvF,MAAMI,eAAe,GAAGpC,oBAAoB,CAAC,CAAC;MAC9C,MAAMqC,YAAY,GAAG5B,iBAAiB,CAAC,CAAC;MACxC,MAAM6B,gBAAgB,GAAGzB,qBAAqB,CAAC,CAAC;MAChD,MAAM0B,aAAa,GAAGxB,kBAAkB,CAAC,CAAC;MAE1C,IAAIwB,aAAa,IAAIF,YAAY,IAAID,eAAe,IAAIE,gBAAgB,EAAE;QACtE7C,eAAe,CAAC+C,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MAC/C,CAAC,MAAM;QACH/C,eAAe,CAAC+C,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;MACjD;MAEAnD,qBAAqB,CAAC,IAAI,CAAC;MAC3BE,sBAAsB,CAAC,IAAI,CAAC;MAC5BJ,0BAA0B,CAAC,CAAC,GAAGD,uBAAuB,CAAC,CAAC;IAC5D,CAAC,MAAM;MACHC,0BAA0B,CAACsD,eAAe,IAAI,CAAC,GAAGA,eAAe,CAAC,CAAC,CAAC,CAAC;IACzE;EACJ,CAAC;EAEC,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,sBAAsB,GAAG,EAAE;IACjC,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,KAAK,GAAGA,KAAK,EAAEmB,CAAC,EAAE,EAAE;MACpC,MAAM2C,WAAW,GAAG7D,WAAW,CAACsC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxC,WAAW,CAACyC,MAAM,CAAC,CAAC;MAC/EmB,sBAAsB,CAACE,IAAI,CAACD,WAAW,CAAC;IAC5C;IACAzD,0BAA0B,CAACwD,sBAAsB,CAAC;EACtD,CAAC;EAEDzE,SAAS,CAAC,MAAM;IACZwE,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAxE,SAAS,CAAC,MAAM;IACd,MAAM4E,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC5B/C,oBAAoB,CAAC,CAAC;MACtBS,iBAAiB,CAAC,CAAC;MACnBI,qBAAqB,CAAC,CAAC;MACvBE,kBAAkB,CAAC,CAAC;MACpBE,mBAAmB,CAAC,CAAC;MACrB9B,0BAA0B,CAAEsD,eAAe,IAAK,CAAC,GAAGA,eAAe,CAAC,CAAC;IACzE,CAAC,EAAE,GAAG,CAAC;IACP,OAAO,MAAMO,aAAa,CAACF,KAAK,CAAC;EACrC,CAAC,EAAE,CACC9C,oBAAoB,EACpBS,iBAAiB,EACjBI,qBAAqB,EACrBE,kBAAkB,EAClBE,mBAAmB,EACnB9B,0BAA0B,CAC7B,CAAC;EAGA,oBACIN,OAAA;IAAKoE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBrE,OAAA;MAAKoE,SAAS,EAAC,MAAM;MAAAC,QAAA,EAChBhE,uBAAuB,CAACiE,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC3CxE,OAAA;QAEIyE,GAAG,EAAEF,UAAW;QAChBG,GAAG,EAAEH,UAAW;QAChB,WAASC,KAAM;QACfG,SAAS,EAAE,IAAK;QAChBC,WAAW,EAAEhC,SAAU;QACvBiC,UAAU,EAAGhC,CAAC,IAAKA,CAAC,CAACiC,cAAc,CAAC,CAAE;QACtCC,WAAW,EAAGlC,CAAC,IAAKA,CAAC,CAACiC,cAAc,CAAC,CAAE;QACvCE,WAAW,EAAGnC,CAAC,IAAKA,CAAC,CAACiC,cAAc,CAAC,CAAE;QACvCG,MAAM,EAAElC,QAAS;QACjBmC,SAAS,EAAElC;MAAQ,GAVdwB,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACPtF,OAAA;MAAKoE,SAAS,EAAC,IAAI;MAAAC,QAAA,eAClBrE,OAAA,CAACT,UAAU;QAACmC,KAAK,EAAEf;MAAa;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAAlF,EAAA,CAtPKD,OAAO;AAAAoF,EAAA,GAAPpF,OAAO;AAwPb,eAAeA,OAAO;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}