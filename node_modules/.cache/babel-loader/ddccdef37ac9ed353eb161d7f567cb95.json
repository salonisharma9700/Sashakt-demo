{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import ScoreBoard from './ScoreBoard'\n// import blueCandy from './cgamimg/blueCandy.png'\n// import greenCandy from './cgamimg/greenCandy.png'\n// import orangeCandy from './cgamimg/orangeCandy.png'\n// import purpleCandy from './cgamimg/purpleCandy.png'\n// import redCandy from './cgamimg/redCandy.png'\n// import yellowCandy from './cgamimg/yellowCandy.png'\n// import blank from './cgamimg/blank.png'\n// import \"./cgam.css\"\n// const PopUp = ({ message, onClose }) => (\n//     <div className=\"popup\">\n//       <div className=\"popup-content\">\n//         <p>{message}</p>\n\n//         <button onClick={onClose}>Close</button>\n//       </div>\n//     </div>\n//   );\n// const width = 8;\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\n// const Gameapp = () => {\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [showPopUp, setShowPopUp] = useState(false);\n//   const [level, setLevel] = useState(1);\n//   const [popUpMessage, setPopUpMessage] = useState(\"\");\n// //   const [showPopUp, setShowPopUp] = useState(false);\n//   const [showLevelUp, setShowLevelUp] = useState(false);\n//   const [showQuiz, setShowQuiz] = useState(false);\n//   const [quizQuestions, setQuizQuestions] = useState([\n//     // Add your quiz questions here\n//   ]);\n//   const [currentQuestions, setCurrentQuestions] = useState([]);\n//   const [quizCompleted, setQuizCompleted] = useState(false);\n\n//   const checkForColumnOfFour = () => {\n//     for (let i = 0; i <= 39; i++) {\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForRowOfFour = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForColumnOfThree = () => {\n//     for (let i = 0; i <= 47; i++) {\n//       const columnOfThree = [i, i + width, i + width * 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         } else {\n//           return false;\n//         }\n//       }\n//     }\n//   };\n\n// const checkForRowOfThree = () => {\n//   for (let i = 0; i < 64; i++) {\n//     const rowOfThree = [i, i + 1, i + 2];\n//     const decidedColor = currentColorArrangement[i];\n//     const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n//     const isBlank = currentColorArrangement[i] === blank;\n\n//     if (notValid.includes(i)) continue;\n\n//     if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//       if (gameStarted) {\n//         setScoreDisplay((score) => score + 1);\n//         rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//         return true;\n//       }\n//       return false;\n//     }\n//   }\n// };\n\n//   const moveIntoSquareBelow = () => {\n//     for (let i = 0; i <= 55; i++) {\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n//       const isFirstRow = firstRow.includes(i);\n\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\n//         currentColorArrangement[i] = candyColors[randomNumber];\n//       }\n\n//       if (currentColorArrangement[i + width] === blank) {\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\n//         currentColorArrangement[i] = blank;\n//       }\n//     }\n//   };\n\n//   const dragStart = (e) => {\n//     setGameStarted(true);\n//     setSquareBeingDragged(e.target);\n//   };\n\n//   const dragDrop = (e) => {\n//     setSquareBeingReplaced(e.target);\n//   };\n\n//   const dragEnd = () => {\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n\n//     const validMoves = [\n//       squareBeingDraggedId - 1,\n//       squareBeingDraggedId - width,\n//       squareBeingDraggedId + 1,\n//       squareBeingDraggedId + width,\n//     ];\n\n//     const validMove = validMoves.includes(squareBeingReplacedId);\n\n//     if (gameStarted) {\n//       const isAColumnOfFour = checkForColumnOfFour();\n//       const isARowOfFour = checkForRowOfFour();\n//       const isAColumnOfThree = checkForColumnOfThree();\n//       const isARowOfThree = checkForRowOfThree();\n\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n//         setSquareBeingDragged(null);\n//         setSquareBeingReplaced(null);\n//       } else {\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n//         setCurrentColorArrangement([...currentColorArrangement]);\n//       }\n//     }\n//   };\n\n//   const createBoard = () => {\n//     const randomColorArrangement = [];\n//     for (let i = 0; i < width * width; i++) {\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n//       randomColorArrangement.push(randomColor);\n//     }\n//     setCurrentColorArrangement(randomColorArrangement);\n//   };\n\n//   useEffect(() => {\n//     createBoard();\n//   }, []);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       checkForColumnOfFour();\n//       checkForRowOfFour();\n//       checkForColumnOfThree();\n//       checkForRowOfThree();\n//       moveIntoSquareBelow();\n//       setCurrentColorArrangement([...currentColorArrangement]);\n\n//       if ((scoreDisplay + 1) % 5 === 0 && !quizCompleted) {\n//         setLevel((prevLevel) => prevLevel + 1);\n//         setQuizCompleted(false);\n\n//         if (quizQuestions.length > 0) {\n//           const shuffledQuestions = shuffleArray(quizQuestions);\n//           const questionsForLevel = shuffledQuestions.splice(0, 2);\n//           setCurrentQuestions(questionsForLevel);\n//           setShowLevelUp(true);\n//           setShowQuiz(true);\n//         }\n//       }\n//     }, 100);\n\n//     return () => clearInterval(timer);\n//   }, [\n//     checkForColumnOfFour,\n//     checkForRowOfFour,\n//     checkForColumnOfThree,\n//     checkForRowOfThree,\n//     moveIntoSquareBelow,\n//     currentColorArrangement,\n//     gameStarted,\n//     scoreDisplay,\n//     quizCompleted,\n//     quizQuestions,\n//   ]);\n\n//   const startQuiz = () => {\n//     setShowQuiz(true);\n//   };\n\n//   const closeLevelUp = () => {\n//     const selectedAnswers = Array.from(document.querySelectorAll('input[type=\"radio\"]:checked')).map((input) => input.value);\n\n//     if (selectedAnswers.length === currentQuestions.length) {\n//       const allCorrect = currentQuestions.every((question, index) => question.correctAnswer === selectedAnswers[index]);\n\n//       if (allCorrect) {\n//         // Show badge or other level-up rewards\n//         setPopUpMessage(\"Congratulations! You cleared a Level!\");\n//         setShowPopUp(true);\n//       } else {\n//         setPopUpMessage(\"Oops! Some answers are incorrect. Please try again or rewatch videos and attempt again.\");\n//         setShowPopUp(true);\n//         setQuizCompleted(false);\n//         setQuizQuestions([]);\n//         return;\n//       }\n//     } else {\n//       setPopUpMessage(\"Please answer all questions before submitting.\");\n//       setShowPopUp(true);\n//       return;\n//     }\n\n//     setShowLevelUp(false);\n//     setShowQuiz(false);\n//   };\n\n//   const handleAnswer = (questionIndex, selectedOption) => {\n//     const currentQuestion = currentQuestions[questionIndex];\n\n//     if (selectedOption === currentQuestion.correctAnswer) {\n//       console.log(\"Correct!\");\n//     } else {\n//       console.log(\"Incorrect!\");\n//     }\n\n//     const allCorrect = currentQuestions.every((question) => question.correctAnswer === selectedOption);\n\n//     setQuizCompleted(allCorrect);\n//   };\n\n//   const shuffleArray = (array) => {\n//     for (let i = array.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [array[i], array[j]] = [array[j], array[i]];\n//     }\n//     return array;\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"game\">\n//         {currentColorArrangement.map((candyColor, index) => (\n//           <img\n//             key={index}\n//             src={candyColor}\n//             alt={`candy_${index}`}\n//             onDragStart={dragStart}\n//             onDragOver={(e) => e.preventDefault()}\n//             onDragEnter={(e) => e.preventDefault()}\n//             onDragLeave={(e) => e.preventDefault()}\n//             onDrop={dragDrop}\n//             onDragEnd={dragEnd}\n//           />\n//         ))}\n//       </div>\n//       <div className=\"sb\">\n//         <ScoreBoard score={scoreDisplay} />\n//       </div>\n\n//       {showLevelUp && (\n//         <div className=\"level-up-popup\">\n//           {/* Add level-up popup content here */}\n//           <button onClick={startQuiz}>Start Quiz</button>\n//         </div>\n//       )}\n\n//       {showQuiz && (\n//         <div className=\"quiz-popup\">\n//           {/* Add quiz content here */}\n//           {currentQuestions.map((question, index) => (\n//             <div key={index}>\n//               <p>{question.question}</p>\n//               {question.options.map((option, optionIndex) => (\n//                 <div key={optionIndex}>\n//                   <input\n//                     type=\"radio\"\n//                     name={`question_${index}`}\n//                     value={option}\n//                     onChange={() => handleAnswer(index, option)}\n//                   />\n//                   <label>{option}</label>\n//                 </div>\n//               ))}\n//             </div>\n//           ))}\n//           <button onClick={closeLevelUp}>Submit Answers</button>\n//         </div>\n//       )}\n\n//       <div className=\"popup\">\n//         {showPopUp && <PopUp message={popUpMessage} onClose={() => setShowPopUp(false)} />}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Gameapp;\n\n// import React, { useEffect, useState } from 'react';\n// import ScoreBoard from './ScoreBoard';\n// import blueCandy from './cgamimg/blueCandy.png';\n// import greenCandy from './cgamimg/greenCandy.png';\n// import orangeCandy from './cgamimg/orangeCandy.png';\n// import purpleCandy from './cgamimg/purpleCandy.png';\n// import redCandy from './cgamimg/redCandy.png';\n// import yellowCandy from './cgamimg/yellowCandy.png';\n// import blank from './cgamimg/blank.png';\n// import './cgam.css';\n\n// const width = 8;\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\n// const Gameapp = () => {\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\n//   const [gameStarted, setGameStarted] = useState(false);\n\n//   const checkForColumnOfFour = () => {\n//     for (let i = 0; i <= 39; i++) {\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForRowOfFour = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 2);\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const checkForColumnOfThree = () => {\n//     for (let i = 0; i <= 47; i++) {\n//       const columnOfThree = [i, i + width, i + width * 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         } else {\n//           return false;\n//         }\n//       }\n//     }\n//   };\n\n//   const checkForRowOfThree = () => {\n//     for (let i = 0; i < 64; i++) {\n//       const rowOfThree = [i, i + 1, i + 2];\n//       const decidedColor = currentColorArrangement[i];\n//       const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n//       const isBlank = currentColorArrangement[i] === blank;\n\n//       if (notValid.includes(i)) continue;\n\n//       if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n//         if (gameStarted) {\n//           setScoreDisplay((score) => score + 1);\n//           rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\n//           return true;\n//         }\n//         return false;\n//       }\n//     }\n//   };\n\n//   const moveIntoSquareBelow = () => {\n//     for (let i = 0; i <= 55; i++) {\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n//       const isFirstRow = firstRow.includes(i);\n\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\n//         currentColorArrangement[i] = candyColors[randomNumber];\n//       }\n\n//       if (currentColorArrangement[i + width] === blank) {\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\n//         currentColorArrangement[i] = blank;\n//       }\n//     }\n//   };\n\n//   const dragStart = (e) => {\n//     setGameStarted(true);\n//     setSquareBeingDragged(e.target);\n//   };\n\n//   const dragDrop = (e) => {\n//     setSquareBeingReplaced(e.target);\n//   };\n\n//   const dragEnd = () => {\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\n\n//     const validMoves = [\n//       squareBeingDraggedId - 1,\n//       squareBeingDraggedId - width,\n//       squareBeingDraggedId + 1,\n//       squareBeingDraggedId + width,\n//     ];\n\n//     const validMove = validMoves.includes(squareBeingReplacedId);\n\n//     if (gameStarted) {\n//       const isAColumnOfFour = checkForColumnOfFour();\n//       const isARowOfFour = checkForRowOfFour();\n//       const isAColumnOfThree = checkForColumnOfThree();\n//       const isARowOfThree = checkForRowOfThree();\n\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n//         setSquareBeingDragged(null);\n//         setSquareBeingReplaced(null);\n//       } else {\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\n//         setCurrentColorArrangement([...currentColorArrangement]);\n//       }\n//     }\n//   };\n\n//   const createBoard = () => {\n//     const randomColorArrangement = [];\n//     for (let i = 0; i < width * width; i++) {\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n//       randomColorArrangement.push(randomColor);\n//     }\n//     setCurrentColorArrangement(randomColorArrangement);\n//   };\n\n//   useEffect(() => {\n//     createBoard();\n//   }, []);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       checkForColumnOfFour();\n//       checkForRowOfFour();\n//       checkForColumnOfThree();\n//       checkForRowOfThree();\n//       moveIntoSquareBelow();\n//       setCurrentColorArrangement([...currentColorArrangement]);\n//     }, 100);\n\n//     return () => clearInterval(timer);\n//   }, [\n//     checkForColumnOfFour,\n//     checkForRowOfFour,\n//     checkForColumnOfThree,\n//     checkForRowOfThree,\n//     moveIntoSquareBelow,\n//     currentColorArrangement,\n//   ]);\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"game\">\n//         {currentColorArrangement.map((candyColor, index) => (\n//           <img\n//             key={index}\n//             src={candyColor}\n//             alt={`candy_${index}`}\n//             onDragStart={dragStart}\n//             onDragOver={(e) => e.preventDefault()}\n//             onDragEnter={(e) => e.preventDefault()}\n//             onDragLeave={(e) => e.preventDefault()}\n//             onDrop={dragDrop}\n//             onDragEnd={dragEnd}\n//           />\n//         ))}\n//       </div>\n//       <div className=\"sb\">\n//         <ScoreBoard score={scoreDisplay} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Gameapp;","map":{"version":3,"names":[],"sources":["C:/Users/salon/OneDrive/Documents/sashakt/src/Games/cgam/cgam.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard'\r\n// import blueCandy from './cgamimg/blueCandy.png'\r\n// import greenCandy from './cgamimg/greenCandy.png'\r\n// import orangeCandy from './cgamimg/orangeCandy.png'\r\n// import purpleCandy from './cgamimg/purpleCandy.png'\r\n// import redCandy from './cgamimg/redCandy.png'\r\n// import yellowCandy from './cgamimg/yellowCandy.png'\r\n// import blank from './cgamimg/blank.png'\r\n// import \"./cgam.css\"\r\n// const PopUp = ({ message, onClose }) => (\r\n//     <div className=\"popup\">\r\n//       <div className=\"popup-content\">\r\n//         <p>{message}</p>\r\n        \r\n//         <button onClick={onClose}>Close</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [level, setLevel] = useState(1);\r\n//   const [popUpMessage, setPopUpMessage] = useState(\"\");\r\n// //   const [showPopUp, setShowPopUp] = useState(false);\r\n//   const [showLevelUp, setShowLevelUp] = useState(false);\r\n//   const [showQuiz, setShowQuiz] = useState(false);\r\n//   const [quizQuestions, setQuizQuestions] = useState([\r\n//     // Add your quiz questions here\r\n//   ]);\r\n//   const [currentQuestions, setCurrentQuestions] = useState([]);\r\n//   const [quizCompleted, setQuizCompleted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n  // const checkForRowOfThree = () => {\r\n  //   for (let i = 0; i < 64; i++) {\r\n  //     const rowOfThree = [i, i + 1, i + 2];\r\n  //     const decidedColor = currentColorArrangement[i];\r\n  //     const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n  //     const isBlank = currentColorArrangement[i] === blank;\r\n\r\n  //     if (notValid.includes(i)) continue;\r\n\r\n  //     if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n  //       if (gameStarted) {\r\n  //         setScoreDisplay((score) => score + 1);\r\n  //         rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n  //         return true;\r\n  //       }\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n\r\n//       if ((scoreDisplay + 1) % 5 === 0 && !quizCompleted) {\r\n//         setLevel((prevLevel) => prevLevel + 1);\r\n//         setQuizCompleted(false);\r\n\r\n//         if (quizQuestions.length > 0) {\r\n//           const shuffledQuestions = shuffleArray(quizQuestions);\r\n//           const questionsForLevel = shuffledQuestions.splice(0, 2);\r\n//           setCurrentQuestions(questionsForLevel);\r\n//           setShowLevelUp(true);\r\n//           setShowQuiz(true);\r\n//         }\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//     gameStarted,\r\n//     scoreDisplay,\r\n//     quizCompleted,\r\n//     quizQuestions,\r\n//   ]);\r\n\r\n//   const startQuiz = () => {\r\n//     setShowQuiz(true);\r\n//   };\r\n\r\n//   const closeLevelUp = () => {\r\n//     const selectedAnswers = Array.from(document.querySelectorAll('input[type=\"radio\"]:checked')).map((input) => input.value);\r\n\r\n//     if (selectedAnswers.length === currentQuestions.length) {\r\n//       const allCorrect = currentQuestions.every((question, index) => question.correctAnswer === selectedAnswers[index]);\r\n\r\n//       if (allCorrect) {\r\n//         // Show badge or other level-up rewards\r\n//         setPopUpMessage(\"Congratulations! You cleared a Level!\");\r\n//         setShowPopUp(true);\r\n//       } else {\r\n//         setPopUpMessage(\"Oops! Some answers are incorrect. Please try again or rewatch videos and attempt again.\");\r\n//         setShowPopUp(true);\r\n//         setQuizCompleted(false);\r\n//         setQuizQuestions([]);\r\n//         return;\r\n//       }\r\n//     } else {\r\n//       setPopUpMessage(\"Please answer all questions before submitting.\");\r\n//       setShowPopUp(true);\r\n//       return;\r\n//     }\r\n\r\n//     setShowLevelUp(false);\r\n//     setShowQuiz(false);\r\n//   };\r\n\r\n//   const handleAnswer = (questionIndex, selectedOption) => {\r\n//     const currentQuestion = currentQuestions[questionIndex];\r\n\r\n//     if (selectedOption === currentQuestion.correctAnswer) {\r\n//       console.log(\"Correct!\");\r\n//     } else {\r\n//       console.log(\"Incorrect!\");\r\n//     }\r\n\r\n//     const allCorrect = currentQuestions.every((question) => question.correctAnswer === selectedOption);\r\n\r\n//     setQuizCompleted(allCorrect);\r\n//   };\r\n\r\n//   const shuffleArray = (array) => {\r\n//     for (let i = array.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [array[i], array[j]] = [array[j], array[i]];\r\n//     }\r\n//     return array;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n\r\n//       {showLevelUp && (\r\n//         <div className=\"level-up-popup\">\r\n//           {/* Add level-up popup content here */}\r\n//           <button onClick={startQuiz}>Start Quiz</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showQuiz && (\r\n//         <div className=\"quiz-popup\">\r\n//           {/* Add quiz content here */}\r\n//           {currentQuestions.map((question, index) => (\r\n//             <div key={index}>\r\n//               <p>{question.question}</p>\r\n//               {question.options.map((option, optionIndex) => (\r\n//                 <div key={optionIndex}>\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question_${index}`}\r\n//                     value={option}\r\n//                     onChange={() => handleAnswer(index, option)}\r\n//                   />\r\n//                   <label>{option}</label>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ))}\r\n//           <button onClick={closeLevelUp}>Submit Answers</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"popup\">\r\n//         {showPopUp && <PopUp message={popUpMessage} onClose={() => setShowPopUp(false)} />}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ScoreBoard from './ScoreBoard';\r\n// import blueCandy from './cgamimg/blueCandy.png';\r\n// import greenCandy from './cgamimg/greenCandy.png';\r\n// import orangeCandy from './cgamimg/orangeCandy.png';\r\n// import purpleCandy from './cgamimg/purpleCandy.png';\r\n// import redCandy from './cgamimg/redCandy.png';\r\n// import yellowCandy from './cgamimg/yellowCandy.png';\r\n// import blank from './cgamimg/blank.png';\r\n// import './cgam.css';\r\n\r\n// const width = 8;\r\n// const candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\r\n\r\n// const Gameapp = () => {\r\n//   const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\r\n//   const [squareBeingDragged, setSquareBeingDragged] = useState(null);\r\n//   const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\r\n//   const [scoreDisplay, setScoreDisplay] = useState(0);\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n\r\n//   const checkForColumnOfFour = () => {\r\n//     for (let i = 0; i <= 39; i++) {\r\n//       const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfFour = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfFour = [i, i + 1, i + 2, i + 3];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 2);\r\n//           rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForColumnOfThree = () => {\r\n//     for (let i = 0; i <= 47; i++) {\r\n//       const columnOfThree = [i, i + width, i + width * 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         } else {\r\n//           return false;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const checkForRowOfThree = () => {\r\n//     for (let i = 0; i < 64; i++) {\r\n//       const rowOfThree = [i, i + 1, i + 2];\r\n//       const decidedColor = currentColorArrangement[i];\r\n//       const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\r\n//       const isBlank = currentColorArrangement[i] === blank;\r\n\r\n//       if (notValid.includes(i)) continue;\r\n\r\n//       if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n//         if (gameStarted) {\r\n//           setScoreDisplay((score) => score + 1);\r\n//           rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const moveIntoSquareBelow = () => {\r\n//     for (let i = 0; i <= 55; i++) {\r\n//       const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\r\n//       const isFirstRow = firstRow.includes(i);\r\n\r\n//       if (isFirstRow && currentColorArrangement[i] === blank) {\r\n//         let randomNumber = Math.floor(Math.random() * candyColors.length);\r\n//         currentColorArrangement[i] = candyColors[randomNumber];\r\n//       }\r\n\r\n//       if (currentColorArrangement[i + width] === blank) {\r\n//         currentColorArrangement[i + width] = currentColorArrangement[i];\r\n//         currentColorArrangement[i] = blank;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const dragStart = (e) => {\r\n//     setGameStarted(true);\r\n//     setSquareBeingDragged(e.target);\r\n//   };\r\n\r\n//   const dragDrop = (e) => {\r\n//     setSquareBeingReplaced(e.target);\r\n//   };\r\n\r\n//   const dragEnd = () => {\r\n//     const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'));\r\n//     const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\r\n\r\n//     currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src');\r\n//     currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src');\r\n\r\n//     const validMoves = [\r\n//       squareBeingDraggedId - 1,\r\n//       squareBeingDraggedId - width,\r\n//       squareBeingDraggedId + 1,\r\n//       squareBeingDraggedId + width,\r\n//     ];\r\n\r\n//     const validMove = validMoves.includes(squareBeingReplacedId);\r\n\r\n//     if (gameStarted) {\r\n//       const isAColumnOfFour = checkForColumnOfFour();\r\n//       const isARowOfFour = checkForRowOfFour();\r\n//       const isAColumnOfThree = checkForColumnOfThree();\r\n//       const isARowOfThree = checkForRowOfThree();\r\n\r\n//       if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n//         setSquareBeingDragged(null);\r\n//         setSquareBeingReplaced(null);\r\n//       } else {\r\n//         currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\r\n//         currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src');\r\n//         setCurrentColorArrangement([...currentColorArrangement]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const createBoard = () => {\r\n//     const randomColorArrangement = [];\r\n//     for (let i = 0; i < width * width; i++) {\r\n//       const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n//       randomColorArrangement.push(randomColor);\r\n//     }\r\n//     setCurrentColorArrangement(randomColorArrangement);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     createBoard();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       checkForColumnOfFour();\r\n//       checkForRowOfFour();\r\n//       checkForColumnOfThree();\r\n//       checkForRowOfThree();\r\n//       moveIntoSquareBelow();\r\n//       setCurrentColorArrangement([...currentColorArrangement]);\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [\r\n//     checkForColumnOfFour,\r\n//     checkForRowOfFour,\r\n//     checkForColumnOfThree,\r\n//     checkForRowOfThree,\r\n//     moveIntoSquareBelow,\r\n//     currentColorArrangement,\r\n//   ]);\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"game\">\r\n//         {currentColorArrangement.map((candyColor, index) => (\r\n//           <img\r\n//             key={index}\r\n//             src={candyColor}\r\n//             alt={`candy_${index}`}\r\n//             onDragStart={dragStart}\r\n//             onDragOver={(e) => e.preventDefault()}\r\n//             onDragEnter={(e) => e.preventDefault()}\r\n//             onDragLeave={(e) => e.preventDefault()}\r\n//             onDrop={dragDrop}\r\n//             onDragEnd={dragEnd}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"sb\">\r\n//         <ScoreBoard score={scoreDisplay} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Gameapp;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}