{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salon\\\\OneDrive\\\\Documents\\\\sashakt\\\\src\\\\ag2\\\\ag2Games\\\\WordSearchGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import './WordSearchGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGame = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [words, setWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const gridSize = 8;\n  const levels = [{\n    words: ['CHILD', 'PARENT', 'POWER', 'BOOK', 'BAG'],\n    gridSize: 10\n  }, {\n    words: ['TEACHER', 'RIGHTS', 'FREEDOM', 'EDUCATION', 'EMPOWERMENT'],\n    gridSize: 10\n  }\n  // Add more levels as needed\n  ];\n  useEffect(() => {\n    // Initialize the grid and words for the current level\n    const currentLevel = levels[level - 1];\n    const newGrid = Array.from({\n      length: currentLevel.gridSize\n    }, () => Array.from({\n      length: currentLevel.gridSize\n    }, () => String.fromCharCode(65 + Math.floor(Math.random() * 26))));\n    setGrid(newGrid);\n    setWords(currentLevel.words);\n  }, [level]);\n  const handleCellClick = (row, col) => {\n    // Toggle the selected state of the cell\n    const newSelectedCells = [...selectedCells];\n    const isSelected = newSelectedCells.some(cell => cell.row === row && cell.col === col);\n    if (isSelected) {\n      setSelectedCells(newSelectedCells.filter(cell => !(cell.row === row && cell.col === col)));\n    } else {\n      setSelectedCells([...newSelectedCells, {\n        row,\n        col\n      }]);\n    }\n  };\n  const checkSelectedWords = () => {\n    const selectedWord = selectedCells.map(cell => grid[cell.row][cell.col]).join('');\n    if (words.includes(selectedWord)) {\n      setScore(score + selectedWord.length);\n      setSelectedCells([]);\n    }\n  };\n  const handleLevelChange = () => {\n    setLevel(prevLevel => prevLevel < levels.length ? prevLevel + 1 : 1);\n    setScore(0);\n    setSelectedCells([]);\n  };\n  const renderGrid = () => {\n    return grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-cell ${selectedCells.some(selectedCell => selectedCell.row === rowIndex && selectedCell.col === colIndex) ? 'selected' : ''}`,\n        onClick: () => handleCellClick(rowIndex, colIndex),\n        children: cell\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sword\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-search-game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sword-score\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"level\",\n          children: [\"Level: \", level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          classNameonClick: handleLevelChange,\n          children: \"Next Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"WORD LIST:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedCells.length === word.length && selectedCells.every((cell, i) => cell.row === index && cell.col === i) ? 'found' : '',\n            children: word\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkSelectedWords,\n        children: \"Check score of Selected Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(WordSearchGame, \"v9+fHIYUQrX0ff0nw2gVNMcWiEU=\");\n_c = WordSearchGame;\nexport default WordSearchGame;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordSearchGame","_s","grid","setGrid","words","setWords","selectedCells","setSelectedCells","score","setScore","level","setLevel","gridSize","levels","currentLevel","newGrid","Array","from","length","String","fromCharCode","Math","floor","random","handleCellClick","row","col","newSelectedCells","isSelected","some","cell","filter","checkSelectedWords","selectedWord","map","join","includes","handleLevelChange","prevLevel","renderGrid","rowIndex","className","children","colIndex","selectedCell","onClick","fileName","_jsxFileName","lineNumber","columnNumber","classNameonClick","word","index","every","i","_c","$RefreshReg$"],"sources":["C:/Users/salon/OneDrive/Documents/sashakt/src/ag2/ag2Games/WordSearchGame.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n// import './WordSearchGame.css';\r\n\r\nconst WordSearchGame = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [words, setWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const gridSize = 8;\r\n\r\n  const levels = [\r\n    { words: ['CHILD', 'PARENT', 'POWER', 'BOOK', 'BAG'], gridSize: 10 },\r\n    { words: ['TEACHER', 'RIGHTS', 'FREEDOM', 'EDUCATION', 'EMPOWERMENT'], gridSize: 10 },\r\n    // Add more levels as needed\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Initialize the grid and words for the current level\r\n    const currentLevel = levels[level - 1];\r\n    const newGrid = Array.from({ length: currentLevel.gridSize }, () =>\r\n      Array.from({ length: currentLevel.gridSize }, () =>\r\n        String.fromCharCode(65 + Math.floor(Math.random() * 26))\r\n      )\r\n    );\r\n    setGrid(newGrid);\r\n    setWords(currentLevel.words);\r\n  }, [level]);\r\n\r\n  const handleCellClick = (row, col) => {\r\n    // Toggle the selected state of the cell\r\n    const newSelectedCells = [...selectedCells];\r\n    const isSelected = newSelectedCells.some(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (isSelected) {\r\n      setSelectedCells(newSelectedCells.filter((cell) => !(cell.row === row && cell.col === col)));\r\n    }\r\n    else {\r\n      setSelectedCells([...newSelectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  const checkSelectedWords = () => {\r\n    const selectedWord = selectedCells.map(\r\n      (cell) => grid[cell.row][cell.col]\r\n    ).join('');\r\n\r\n    if (words.includes(selectedWord)) {\r\n      setScore(score + selectedWord.length);\r\n      setSelectedCells([]);\r\n    }\r\n  };\r\n\r\n  const handleLevelChange = () => {\r\n    setLevel((prevLevel) => (prevLevel < levels.length ? prevLevel + 1 : 1));\r\n    setScore(0);\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  const renderGrid = () => {\r\n    return grid.map((row, rowIndex) => (\r\n      <div key={rowIndex} className=\"grid-row\">\r\n        {row.map((cell, colIndex) => (\r\n          <div\r\n            key={colIndex}\r\n            className={`grid-cell ${selectedCells.some(\r\n              (selectedCell) =>\r\n                selectedCell.row === rowIndex && selectedCell.col === colIndex\r\n            ) ? 'selected' : ''}`}\r\n            onClick={() => handleCellClick(rowIndex, colIndex)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"sword\">\r\n      <div className=\"word-search-game\">\r\n        <div className=\"sword-score\">\r\n          <div className=\"score\">Score: {score}</div>\r\n      \r\n          <div className=\"level\">Level: {level}</div>\r\n         \r\n          <button classNameonClick={handleLevelChange}>Next Level</button>\r\n          <br />\r\n\r\n        </div>\r\n        <div className=\"grid\">{renderGrid()}</div>\r\n        <div className=\"word-list\">\r\n          <h3>WORD LIST:</h3>\r\n          <ul>\r\n            {words.map((word, index) => (\r\n              <li key={index} className={selectedCells.length === word.length && selectedCells.every((cell, i) => cell.row === index && cell.col === i) ? 'found' : ''}>\r\n                {word}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <br />\r\n        <button onClick={checkSelectedWords}>Check score of Selected Word</button>\r\n      </div>\r\n      </div>\r\n      );\r\n};\r\n\r\nexport default WordSearchGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}