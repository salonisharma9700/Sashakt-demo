{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salon\\\\OneDrive\\\\Documents\\\\sashakt\\\\src\\\\ag2\\\\ag2Games\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\n// import './GameBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = [{\n  id: 1,\n  name: \"react\",\n  img: \"/images/RTedu.jpeg\",\n  matched: false\n}, {\n  id: 2,\n  name: \"java\",\n  img: \"/images/RTdev.png\",\n  matched: false\n}, {\n  id: 3,\n  name: \"css\",\n  img: \"/images/RTdis.jpeg\",\n  matched: false\n}, {\n  id: 4,\n  name: \"node\",\n  img: \"/images/RTpro.jpeg\",\n  matched: false\n}, {\n  id: 5,\n  name: \"html\",\n  img: \"/images/RTpar.png\",\n  matched: false\n}, {\n  id: 6,\n  name: \"js\",\n  img: \"/images/RTsur.jpeg\",\n  matched: false\n}, {\n  id: 7,\n  name: \"react\",\n  img: \"/images/RTedu.jpeg\",\n  matched: false\n}, {\n  id: 8,\n  name: \"java\",\n  img: \"/images/RTdev.png\",\n  matched: false\n}, {\n  id: 9,\n  name: \"css\",\n  img: \"/images/RTdis.jpeg\",\n  matched: false\n}, {\n  id: 10,\n  name: \"node\",\n  img: \"/images/RTpro.jpeg\",\n  matched: false\n}, {\n  id: 11,\n  name: \"html\",\n  img: \"/images/RTpar.png\",\n  matched: false\n}, {\n  id: 12,\n  name: \"js\",\n  img: \"/images/RTsur.jpeg\",\n  matched: false\n}];\n\n// function Card({ item, handleSelectedCards, toggled, stopflip }) {\n//   return (\n//     <div className=\"item\">\n//       <div className={toggled ? \"toggled\" : \"\"}>\n//         <img className=\"face\" src={item.img} alt=\"face\" />\n//         <div\n//           className=\"back\"\n//           onClick={() => !stopflip && handleSelectedCards(item)}\n//         >\n//           {\" \"}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// function GameBoard() {\n//   const [cardsArray, setCardsArray] = React.useState([]);\n//   const [moves, setMoves] = React.useState(0);\n//   const [firstCard, setFirstCard] = React.useState(null);\n//   const [secondCard, setSecondCard] = React.useState(null);\n//   const [stopFlip, setStopFlip] = React.useState(false);\n//   const [won, setWon] = React.useState(0);\n\n//   function NewGame() {\n//     setTimeout(() => {\n//       const randomOrderArray = Data.sort(() => 0.5 - Math.random());\n//       setCardsArray(randomOrderArray);\n//       setMoves(0);\n//       setFirstCard(null);\n//       setSecondCard(null);\n//       setWon(0);\n//     }, 1200);\n//   }\n\n//   function handleSelectedCards(item) {\n//     if (firstCard !== null && firstCard.id !== item.id) {\n//       setSecondCard(item);\n//     } else {\n//       setFirstCard(item);\n//     }\n//   }\n\n//   React.useEffect(() => {\n//     if (firstCard && secondCard) {\n//       setStopFlip(true);\n//       if (firstCard.name === secondCard.name) {\n//         setCardsArray((prevArray) => {\n//           return prevArray.map((unit) => {\n//             if (unit.name === firstCard.name) {\n//               return { ...unit, matched: true };\n//             } else {\n//               return unit;\n//             }\n//           });\n//         });\n//         setWon((preVal) => preVal + 1);\n//         removeSelection();\n//       } else {\n//         setTimeout(() => {\n//           removeSelection();\n//         }, 1000);\n//       }\n//     }\n//   }, [firstCard, secondCard]);\n\n//   function removeSelection() {\n//     setFirstCard(null);\n//     setSecondCard(null);\n//     setStopFlip(false);\n//     setMoves((prevValue) => prevValue + 1);\n//   }\n\n//   React.useEffect(() => {\n//     NewGame();\n//   }, []);\n\n//   return (\n//      <div>\n//       <div className=\"sam\">\n//         <h1 className=\"mg-heading\">Memory Game</h1>\n//       </div>\n//       <div className=\"board\">\n//         {cardsArray.map((item) => (\n//           <Card\n//             item={item}\n//             key={item.id}\n//             handleSelectedCards={handleSelectedCards}\n//             toggled={\n//               item === firstCard ||\n//               item === secondCard ||\n//               item.matched === true\n//             }\n//             stopflip={stopFlip}\n//           />\n//         ))}\n//       </div>\n\n//       {won !== 6 ? (\n//         <div className=\"comments\">Moves : {moves}</div>\n//       ) : (\n//         <div className=\"comments\">\n//           You Won in {moves} moves\n//         </div>\n//       )}\n//       <button className=\"button\" onClick={NewGame}>\n//         New Game\n//       </button>\n//       {/* <Link to =\"/Memory \" className=\"btn btn-primary\">Start the Game</Link> */}\n//     </div>\n\n//   );\n// }\n\n// export default GameBoard;\n\nfunction Card({\n  item,\n  handleSelectedCards,\n  toggled,\n  stopflip\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: toggled ? \"toggled\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"face\",\n        src: item.img,\n        alt: \"face\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"back\",\n        onClick: () => !stopflip && handleSelectedCards(item),\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_c = Card;\nfunction GameBoard() {\n  _s();\n  const [cardsArray, setCardsArray] = React.useState([]);\n  const [moves, setMoves] = React.useState(0);\n  const [firstCard, setFirstCard] = React.useState(null);\n  const [secondCard, setSecondCard] = React.useState(null);\n  const [stopFlip, setStopFlip] = React.useState(false);\n  const [won, setWon] = React.useState(0);\n  function NewGame() {\n    setTimeout(() => {\n      const randomOrderArray = Data.sort(() => 0.5 - Math.random());\n      setCardsArray(randomOrderArray);\n      setMoves(0);\n      setFirstCard(null);\n      setSecondCard(null);\n      setWon(0);\n    }, 1200);\n  }\n  function handleSelectedCards(item) {\n    if (firstCard !== null && firstCard.id !== item.id) {\n      setSecondCard(item);\n    } else {\n      setFirstCard(item);\n    }\n  }\n  React.useEffect(() => {\n    if (firstCard && secondCard) {\n      setStopFlip(true);\n      if (firstCard.name === secondCard.name) {\n        setCardsArray(prevArray => {\n          return prevArray.map(unit => {\n            if (unit.name === firstCard.name) {\n              return {\n                ...unit,\n                matched: true\n              };\n            } else {\n              return unit;\n            }\n          });\n        });\n        setWon(preVal => preVal + 1);\n        removeSelection();\n      } else {\n        setTimeout(() => {\n          removeSelection();\n        }, 1000);\n      }\n    }\n  }, [firstCard, secondCard]);\n  function removeSelection() {\n    setFirstCard(null);\n    setSecondCard(null);\n    setStopFlip(false);\n    setMoves(prevValue => prevValue + 1);\n  }\n  React.useEffect(() => {\n    NewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mem-gam\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memMain\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mem-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"mg-heading\",\n          children: \"Memory Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mem-board\",\n        children: cardsArray.map(item => /*#__PURE__*/_jsxDEV(Card, {\n          item: item,\n          handleSelectedCards: handleSelectedCards,\n          toggled: item === firstCard || item === secondCard || item.matched === true,\n          stopflip: stopFlip\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), won !== 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: [\"You Won in \", moves, \" moves!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: NewGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"I4tC8ZZCT0/euHDBfPZow7c0MwM=\");\n_c2 = GameBoard;\nexport default GameBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"GameBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Data","id","name","img","matched","Card","item","handleSelectedCards","toggled","stopflip","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","GameBoard","_s","cardsArray","setCardsArray","useState","moves","setMoves","firstCard","setFirstCard","secondCard","setSecondCard","stopFlip","setStopFlip","won","setWon","NewGame","setTimeout","randomOrderArray","sort","Math","random","useEffect","prevArray","map","unit","preVal","removeSelection","prevValue","_c2","$RefreshReg$"],"sources":["C:/Users/salon/OneDrive/Documents/sashakt/src/ag2/ag2Games/GameBoard.js"],"sourcesContent":["import React from 'react';\r\n// import './GameBoard.css';\r\n\r\nconst Data = [\r\n  {\r\n    id: 1,\r\n    name: \"react\",\r\n    img: \"/images/RTedu.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"java\",\r\n    img:\r\n      \"/images/RTdev.png\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"css\",\r\n    img:\r\n      \"/images/RTdis.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"node\",\r\n    img:\r\n      \"/images/RTpro.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"html\",\r\n    img:\r\n      \"/images/RTpar.png\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"js\",\r\n    img:\r\n      \"/images/RTsur.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"react\",\r\n    img: \"/images/RTedu.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"java\",\r\n    img:\r\n      \"/images/RTdev.png\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"css\",\r\n    img:\r\n      \"/images/RTdis.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"node\",\r\n    img:\r\n      \"/images/RTpro.jpeg\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"html\",\r\n    img:\r\n      \"/images/RTpar.png\",\r\n    matched: false,\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"js\",\r\n    img:\r\n      \"/images/RTsur.jpeg\",\r\n    matched: false,\r\n  },\r\n\r\n];\r\n\r\n// function Card({ item, handleSelectedCards, toggled, stopflip }) {\r\n//   return (\r\n//     <div className=\"item\">\r\n//       <div className={toggled ? \"toggled\" : \"\"}>\r\n//         <img className=\"face\" src={item.img} alt=\"face\" />\r\n//         <div\r\n//           className=\"back\"\r\n//           onClick={() => !stopflip && handleSelectedCards(item)}\r\n//         >\r\n//           {\" \"}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function GameBoard() {\r\n//   const [cardsArray, setCardsArray] = React.useState([]);\r\n//   const [moves, setMoves] = React.useState(0);\r\n//   const [firstCard, setFirstCard] = React.useState(null);\r\n//   const [secondCard, setSecondCard] = React.useState(null);\r\n//   const [stopFlip, setStopFlip] = React.useState(false);\r\n//   const [won, setWon] = React.useState(0);\r\n\r\n//   function NewGame() {\r\n//     setTimeout(() => {\r\n//       const randomOrderArray = Data.sort(() => 0.5 - Math.random());\r\n//       setCardsArray(randomOrderArray);\r\n//       setMoves(0);\r\n//       setFirstCard(null);\r\n//       setSecondCard(null);\r\n//       setWon(0);\r\n//     }, 1200);\r\n//   }\r\n\r\n//   function handleSelectedCards(item) {\r\n//     if (firstCard !== null && firstCard.id !== item.id) {\r\n//       setSecondCard(item);\r\n//     } else {\r\n//       setFirstCard(item);\r\n//     }\r\n//   }\r\n\r\n//   React.useEffect(() => {\r\n//     if (firstCard && secondCard) {\r\n//       setStopFlip(true);\r\n//       if (firstCard.name === secondCard.name) {\r\n//         setCardsArray((prevArray) => {\r\n//           return prevArray.map((unit) => {\r\n//             if (unit.name === firstCard.name) {\r\n//               return { ...unit, matched: true };\r\n//             } else {\r\n//               return unit;\r\n//             }\r\n//           });\r\n//         });\r\n//         setWon((preVal) => preVal + 1);\r\n//         removeSelection();\r\n//       } else {\r\n//         setTimeout(() => {\r\n//           removeSelection();\r\n//         }, 1000);\r\n//       }\r\n//     }\r\n//   }, [firstCard, secondCard]);\r\n\r\n//   function removeSelection() {\r\n//     setFirstCard(null);\r\n//     setSecondCard(null);\r\n//     setStopFlip(false);\r\n//     setMoves((prevValue) => prevValue + 1);\r\n//   }\r\n\r\n//   React.useEffect(() => {\r\n//     NewGame();\r\n//   }, []);\r\n\r\n//   return (\r\n//      <div>\r\n//       <div className=\"sam\">\r\n//         <h1 className=\"mg-heading\">Memory Game</h1>\r\n//       </div>\r\n//       <div className=\"board\">\r\n//         {cardsArray.map((item) => (\r\n//           <Card\r\n//             item={item}\r\n//             key={item.id}\r\n//             handleSelectedCards={handleSelectedCards}\r\n//             toggled={\r\n//               item === firstCard ||\r\n//               item === secondCard ||\r\n//               item.matched === true\r\n//             }\r\n//             stopflip={stopFlip}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n\r\n//       {won !== 6 ? (\r\n//         <div className=\"comments\">Moves : {moves}</div>\r\n//       ) : (\r\n//         <div className=\"comments\">\r\n//           You Won in {moves} moves\r\n//         </div>\r\n//       )}\r\n//       <button className=\"button\" onClick={NewGame}>\r\n//         New Game\r\n//       </button>\r\n//       {/* <Link to =\"/Memory \" className=\"btn btn-primary\">Start the Game</Link> */}\r\n//     </div>\r\n\r\n//   );\r\n// }\r\n\r\n// export default GameBoard;\r\n\r\nfunction Card({ item, handleSelectedCards, toggled, stopflip }) {\r\n  return (\r\n    <div className=\"item\">\r\n      <div className={toggled ? \"toggled\" : \"\"}>\r\n        <img className=\"face\" src={item.img} alt=\"face\" />\r\n        <div\r\n          className=\"back\"\r\n          onClick={() => !stopflip && handleSelectedCards(item)}\r\n        >\r\n          {\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction GameBoard() {\r\n  const [cardsArray, setCardsArray] = React.useState([]);\r\n  const [moves, setMoves] = React.useState(0);\r\n  const [firstCard, setFirstCard] = React.useState(null);\r\n  const [secondCard, setSecondCard] = React.useState(null);\r\n  const [stopFlip, setStopFlip] = React.useState(false);\r\n  const [won, setWon] = React.useState(0);\r\n\r\n  function NewGame() {\r\n    setTimeout(() => {\r\n      const randomOrderArray = Data.sort(() => 0.5 - Math.random());\r\n      setCardsArray(randomOrderArray);\r\n      setMoves(0);\r\n      setFirstCard(null);\r\n      setSecondCard(null);\r\n      setWon(0);\r\n    }, 1200);\r\n  }\r\n\r\n  function handleSelectedCards(item) {\r\n    if (firstCard !== null && firstCard.id !== item.id) {\r\n      setSecondCard(item);\r\n    } else {\r\n      setFirstCard(item);\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (firstCard && secondCard) {\r\n      setStopFlip(true);\r\n      if (firstCard.name === secondCard.name) {\r\n        setCardsArray((prevArray) => {\r\n          return prevArray.map((unit) => {\r\n            if (unit.name === firstCard.name) {\r\n              return { ...unit, matched: true };\r\n            } else {\r\n              return unit;\r\n            }\r\n          });\r\n        });\r\n        setWon((preVal) => preVal + 1);\r\n        removeSelection();\r\n      } else {\r\n        setTimeout(() => {\r\n          removeSelection();\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [firstCard, secondCard]);\r\n\r\n  function removeSelection() {\r\n    setFirstCard(null);\r\n    setSecondCard(null);\r\n    setStopFlip(false);\r\n    setMoves((prevValue) => prevValue + 1);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    NewGame();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mem-gam\">\r\n      <div className=\"memMain\">\r\n        <div className=\"mem-header\">\r\n          <h1 className=\"mg-heading\">Memory Game</h1>\r\n        </div>\r\n        <div className=\"mem-board\">\r\n          {cardsArray.map((item) => (\r\n            <Card\r\n              item={item}\r\n              key={item.id}\r\n              handleSelectedCards={handleSelectedCards}\r\n              toggled={\r\n                item === firstCard || item === secondCard || item.matched === true\r\n              }\r\n              stopflip={stopFlip}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {won !== 6 ? (\r\n          <div className=\"comments\">Moves: {moves}</div>\r\n        ) : (\r\n          <div className=\"comments\">You Won in {moves} moves!</div>\r\n        )}\r\n        <button className=\"\" onClick={NewGame}>\r\n          New Game\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}